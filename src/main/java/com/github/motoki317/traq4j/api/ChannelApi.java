/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;
import com.github.motoki317.traq4j.ProgressRequestBody;
import com.github.motoki317.traq4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.motoki317.traq4j.model.BotUser;
import com.github.motoki317.traq4j.model.Channel;
import com.github.motoki317.traq4j.model.ChannelEvent;
import com.github.motoki317.traq4j.model.ChannelList;
import com.github.motoki317.traq4j.model.ChannelStats;
import com.github.motoki317.traq4j.model.ChannelTopic;
import com.github.motoki317.traq4j.model.ChannelViewer;
import com.github.motoki317.traq4j.model.DMChannel;
import com.github.motoki317.traq4j.model.Message;
import org.threeten.bp.OffsetDateTime;
import com.github.motoki317.traq4j.model.PatchChannelRequest;
import com.github.motoki317.traq4j.model.PatchChannelSubscribersRequest;
import com.github.motoki317.traq4j.model.Pin;
import com.github.motoki317.traq4j.model.PostChannelRequest;
import com.github.motoki317.traq4j.model.PostMessageRequest;
import com.github.motoki317.traq4j.model.PutChannelSubscribersRequest;
import com.github.motoki317.traq4j.model.PutChannelTopicRequest;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelApi {
    private ApiClient localVarApiClient;

    public ChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createChannel
     *
     * @param postChannelRequest (optional)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のチャンネルは既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createChannelCall(PostChannelRequest postChannelRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postChannelRequest;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelValidateBeforeCall(PostChannelRequest postChannelRequest, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = createChannelCall(postChannelRequest, _callback);
        return localVarCall;

    }

    /**
     * チャンネルを作成
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     *
     * @param postChannelRequest (optional)
     * @return Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のチャンネルは既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public Channel createChannel(PostChannelRequest postChannelRequest) throws ApiException {
        ApiResponse<Channel> localVarResp = createChannelWithHttpInfo(postChannelRequest);
        return localVarResp.getData();
    }

    /**
     * チャンネルを作成
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     *
     * @param postChannelRequest (optional)
     * @return ApiResponse&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のチャンネルは既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Channel> createChannelWithHttpInfo(PostChannelRequest postChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = createChannelValidateBeforeCall(postChannelRequest, null);
        Type localVarReturnType = new TypeToken<Channel>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルを作成 (asynchronously)
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     *
     * @param postChannelRequest (optional)
     * @param _callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のチャンネルは既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createChannelAsync(PostChannelRequest postChannelRequest, final ApiCallback<Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelValidateBeforeCall(postChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<Channel>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for editChannel
     *
     * @param channelId           チャンネルUUID (required)
     * @param patchChannelRequest (optional)
     * @param _callback           Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後の名前のチャンネルが既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editChannelCall(UUID channelId, PatchChannelRequest patchChannelRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelId}"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editChannelValidateBeforeCall(UUID channelId, PatchChannelRequest patchChannelRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling editChannel(Async)");
        }


        okhttp3.Call localVarCall = editChannelCall(channelId, patchChannelRequest, _callback);
        return localVarCall;

    }

    /**
     * チャンネル情報を変更
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
     *
     * @param channelId           チャンネルUUID (required)
     * @param patchChannelRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後の名前のチャンネルが既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public void editChannel(UUID channelId, PatchChannelRequest patchChannelRequest) throws ApiException {
        editChannelWithHttpInfo(channelId, patchChannelRequest);
    }

    /**
     * チャンネル情報を変更
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
     *
     * @param channelId           チャンネルUUID (required)
     * @param patchChannelRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後の名前のチャンネルが既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editChannelWithHttpInfo(UUID channelId, PatchChannelRequest patchChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = editChannelValidateBeforeCall(channelId, patchChannelRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * チャンネル情報を変更 (asynchronously)
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
     *
     * @param channelId           チャンネルUUID (required)
     * @param patchChannelRequest (optional)
     * @param _callback           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後の名前のチャンネルが既に存在しています。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editChannelAsync(UUID channelId, PatchChannelRequest patchChannelRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editChannelValidateBeforeCall(channelId, patchChannelRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editChannelSubscribers
     *
     * @param channelId                      チャンネルUUID (required)
     * @param patchChannelSubscribersRequest (optional)
     * @param _callback                      Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editChannelSubscribersCall(UUID channelId, PatchChannelSubscribersRequest patchChannelSubscribersRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchChannelSubscribersRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/subscribers"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editChannelSubscribersValidateBeforeCall(UUID channelId, PatchChannelSubscribersRequest patchChannelSubscribersRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling editChannelSubscribers(Async)");
        }


        okhttp3.Call localVarCall = editChannelSubscribersCall(channelId, patchChannelSubscribersRequest, _callback);
        return localVarCall;

    }

    /**
     * チャンネルの通知購読者を編集
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     *
     * @param channelId                      チャンネルUUID (required)
     * @param patchChannelSubscribersRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void editChannelSubscribers(UUID channelId, PatchChannelSubscribersRequest patchChannelSubscribersRequest) throws ApiException {
        editChannelSubscribersWithHttpInfo(channelId, patchChannelSubscribersRequest);
    }

    /**
     * チャンネルの通知購読者を編集
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     *
     * @param channelId                      チャンネルUUID (required)
     * @param patchChannelSubscribersRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editChannelSubscribersWithHttpInfo(UUID channelId, PatchChannelSubscribersRequest patchChannelSubscribersRequest) throws ApiException {
        okhttp3.Call localVarCall = editChannelSubscribersValidateBeforeCall(channelId, patchChannelSubscribersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * チャンネルの通知購読者を編集 (asynchronously)
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     *
     * @param channelId                      チャンネルUUID (required)
     * @param patchChannelSubscribersRequest (optional)
     * @param _callback                      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editChannelSubscribersAsync(UUID channelId, PatchChannelSubscribersRequest patchChannelSubscribersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editChannelSubscribersValidateBeforeCall(channelId, patchChannelSubscribersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editChannelTopic
     *
     * @param channelId              チャンネルUUID (required)
     * @param putChannelTopicRequest (optional)
     * @param _callback              Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content チャンネルトピックが編集されました </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editChannelTopicCall(UUID channelId, PutChannelTopicRequest putChannelTopicRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putChannelTopicRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/topic"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editChannelTopicValidateBeforeCall(UUID channelId, PutChannelTopicRequest putChannelTopicRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling editChannelTopic(Async)");
        }


        okhttp3.Call localVarCall = editChannelTopicCall(channelId, putChannelTopicRequest, _callback);
        return localVarCall;

    }

    /**
     * チャンネルトピックを編集
     * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
     *
     * @param channelId              チャンネルUUID (required)
     * @param putChannelTopicRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content チャンネルトピックが編集されました </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void editChannelTopic(UUID channelId, PutChannelTopicRequest putChannelTopicRequest) throws ApiException {
        editChannelTopicWithHttpInfo(channelId, putChannelTopicRequest);
    }

    /**
     * チャンネルトピックを編集
     * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
     *
     * @param channelId              チャンネルUUID (required)
     * @param putChannelTopicRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content チャンネルトピックが編集されました </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editChannelTopicWithHttpInfo(UUID channelId, PutChannelTopicRequest putChannelTopicRequest) throws ApiException {
        okhttp3.Call localVarCall = editChannelTopicValidateBeforeCall(channelId, putChannelTopicRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * チャンネルトピックを編集 (asynchronously)
     * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
     *
     * @param channelId              チャンネルUUID (required)
     * @param putChannelTopicRequest (optional)
     * @param _callback              The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content チャンネルトピックが編集されました </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editChannelTopicAsync(UUID channelId, PutChannelTopicRequest putChannelTopicRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editChannelTopicValidateBeforeCall(channelId, putChannelTopicRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannel
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannel(Async)");
        }


        okhttp3.Call localVarCall = getChannelCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネル情報を取得
     * 指定したチャンネルの情報を取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public Channel getChannel(UUID channelId) throws ApiException {
        ApiResponse<Channel> localVarResp = getChannelWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネル情報を取得
     * 指定したチャンネルの情報を取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Channel> getChannelWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<Channel>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネル情報を取得 (asynchronously)
     * 指定したチャンネルの情報を取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelAsync(UUID channelId, final ApiCallback<Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<Channel>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannelBots
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelBotsCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/bots"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelBotsValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelBots(Async)");
        }


        okhttp3.Call localVarCall = getChannelBotsCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネル参加中のBOTのリストを取得
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return List&lt;BotUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<BotUser> getChannelBots(UUID channelId) throws ApiException {
        ApiResponse<List<BotUser>> localVarResp = getChannelBotsWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネル参加中のBOTのリストを取得
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;List&lt;BotUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<BotUser>> getChannelBotsWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelBotsValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<BotUser>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネル参加中のBOTのリストを取得 (asynchronously)
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelBotsAsync(UUID channelId, final ApiCallback<List<BotUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelBotsValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<BotUser>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannelEvents
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelEventsCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/events"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (inclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inclusive", inclusive));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelEventsValidateBeforeCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelEvents(Async)");
        }


        okhttp3.Call localVarCall = getChannelEventsCall(channelId, limit, offset, since, until, inclusive, order, _callback);
        return localVarCall;

    }

    /**
     * チャンネルイベントのリストを取得
     * 指定したチャンネルのイベントリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return List&lt;ChannelEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<ChannelEvent> getChannelEvents(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        ApiResponse<List<ChannelEvent>> localVarResp = getChannelEventsWithHttpInfo(channelId, limit, offset, since, until, inclusive, order);
        return localVarResp.getData();
    }

    /**
     * チャンネルイベントのリストを取得
     * 指定したチャンネルのイベントリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return ApiResponse&lt;List&lt;ChannelEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<ChannelEvent>> getChannelEventsWithHttpInfo(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        okhttp3.Call localVarCall = getChannelEventsValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, null);
        Type localVarReturnType = new TypeToken<List<ChannelEvent>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルイベントのリストを取得 (asynchronously)
     * 指定したチャンネルのイベントリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelEventsAsync(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback<List<ChannelEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelEventsValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, _callback);
        Type localVarReturnType = new TypeToken<List<ChannelEvent>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannelPins
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelPinsCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/pins"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelPinsValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelPins(Async)");
        }


        okhttp3.Call localVarCall = getChannelPinsCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネルピンのリストを取得
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return List&lt;Pin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<Pin> getChannelPins(UUID channelId) throws ApiException {
        ApiResponse<List<Pin>> localVarResp = getChannelPinsWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネルピンのリストを取得
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;List&lt;Pin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Pin>> getChannelPinsWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelPinsValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<Pin>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルピンのリストを取得 (asynchronously)
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelPinsAsync(UUID channelId, final ApiCallback<List<Pin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelPinsValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<Pin>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannelStats
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelStatsCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/stats"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelStatsValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelStats(Async)");
        }


        okhttp3.Call localVarCall = getChannelStatsCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネル統計情報を取得
     * 指定したチャンネルの統計情報を取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ChannelStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ChannelStats getChannelStats(UUID channelId) throws ApiException {
        ApiResponse<ChannelStats> localVarResp = getChannelStatsWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネル統計情報を取得
     * 指定したチャンネルの統計情報を取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;ChannelStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ChannelStats> getChannelStatsWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelStatsValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<ChannelStats>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネル統計情報を取得 (asynchronously)
     * 指定したチャンネルの統計情報を取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelStatsAsync(UUID channelId, final ApiCallback<ChannelStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelStatsValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<ChannelStats>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannelSubscribers
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden プライベートチャンネル・強制通知チャンネルの設定は取得できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelSubscribersCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/subscribers"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelSubscribersValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelSubscribers(Async)");
        }


        okhttp3.Call localVarCall = getChannelSubscribersCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネルの通知購読者のリストを取得
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return List&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden プライベートチャンネル・強制通知チャンネルの設定は取得できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<UUID> getChannelSubscribers(UUID channelId) throws ApiException {
        ApiResponse<List<UUID>> localVarResp = getChannelSubscribersWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネルの通知購読者のリストを取得
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;List&lt;UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden プライベートチャンネル・強制通知チャンネルの設定は取得できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<UUID>> getChannelSubscribersWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelSubscribersValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<UUID>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルの通知購読者のリストを取得 (asynchronously)
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden プライベートチャンネル・強制通知チャンネルの設定は取得できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelSubscribersAsync(UUID channelId, final ApiCallback<List<UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelSubscribersValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<UUID>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannelTopic
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelTopicCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/topic"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelTopicValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelTopic(Async)");
        }


        okhttp3.Call localVarCall = getChannelTopicCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネルトピックを取得
     * 指定したチャンネルのトピックを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ChannelTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ChannelTopic getChannelTopic(UUID channelId) throws ApiException {
        ApiResponse<ChannelTopic> localVarResp = getChannelTopicWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネルトピックを取得
     * 指定したチャンネルのトピックを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;ChannelTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ChannelTopic> getChannelTopicWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelTopicValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<ChannelTopic>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルトピックを取得 (asynchronously)
     * 指定したチャンネルのトピックを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelTopicAsync(UUID channelId, final ApiCallback<ChannelTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelTopicValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<ChannelTopic>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannelViewers
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelViewersCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/viewers"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelViewersValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelViewers(Async)");
        }


        okhttp3.Call localVarCall = getChannelViewersCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネル閲覧者リストを取得
     * 指定したチャンネルの閲覧者のリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return List&lt;ChannelViewer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<ChannelViewer> getChannelViewers(UUID channelId) throws ApiException {
        ApiResponse<List<ChannelViewer>> localVarResp = getChannelViewersWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネル閲覧者リストを取得
     * 指定したチャンネルの閲覧者のリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;List&lt;ChannelViewer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<ChannelViewer>> getChannelViewersWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelViewersValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<ChannelViewer>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネル閲覧者リストを取得 (asynchronously)
     * 指定したチャンネルの閲覧者のリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelViewersAsync(UUID channelId, final ApiCallback<List<ChannelViewer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelViewersValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<ChannelViewer>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getChannels
     *
     * @param includeDm ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelsCall(Boolean includeDm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-dm", includeDm));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelsValidateBeforeCall(Boolean includeDm, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getChannelsCall(includeDm, _callback);
        return localVarCall;

    }

    /**
     * チャンネルリストを取得
     * チャンネルのリストを取得します。
     *
     * @param includeDm ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)
     * @return ChannelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ChannelList getChannels(Boolean includeDm) throws ApiException {
        ApiResponse<ChannelList> localVarResp = getChannelsWithHttpInfo(includeDm);
        return localVarResp.getData();
    }

    /**
     * チャンネルリストを取得
     * チャンネルのリストを取得します。
     *
     * @param includeDm ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)
     * @return ApiResponse&lt;ChannelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ChannelList> getChannelsWithHttpInfo(Boolean includeDm) throws ApiException {
        okhttp3.Call localVarCall = getChannelsValidateBeforeCall(includeDm, null);
        Type localVarReturnType = new TypeToken<ChannelList>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルリストを取得 (asynchronously)
     * チャンネルのリストを取得します。
     *
     * @param includeDm ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getChannelsAsync(Boolean includeDm, final ApiCallback<ChannelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelsValidateBeforeCall(includeDm, _callback);
        Type localVarReturnType = new TypeToken<ChannelList>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMessages
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessagesCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/messages"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (inclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inclusive", inclusive));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesValidateBeforeCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getMessages(Async)");
        }


        okhttp3.Call localVarCall = getMessagesCall(channelId, limit, offset, since, until, inclusive, order, _callback);
        return localVarCall;

    }

    /**
     * チャンネルメッセージのリストを取得
     * 指定したチャンネルのメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return List&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<Message> getMessages(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        ApiResponse<List<Message>> localVarResp = getMessagesWithHttpInfo(channelId, limit, offset, since, until, inclusive, order);
        return localVarResp.getData();
    }

    /**
     * チャンネルメッセージのリストを取得
     * 指定したチャンネルのメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return ApiResponse&lt;List&lt;Message&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Message>> getMessagesWithHttpInfo(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, null);
        Type localVarReturnType = new TypeToken<List<Message>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルメッセージのリストを取得 (asynchronously)
     * 指定したチャンネルのメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessagesAsync(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback<List<Message>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, _callback);
        Type localVarReturnType = new TypeToken<List<Message>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserDMChannel
     *
     * @param userId    (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserDMChannelCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/dm-channel"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDMChannelValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserDMChannel(Async)");
        }


        okhttp3.Call localVarCall = getUserDMChannelCall(userId, _callback);
        return localVarCall;

    }

    /**
     * DMチャンネル情報を取得
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     *
     * @param userId (required)
     * @return DMChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。  </td><td>  -  </td></tr>
     * </table>
     */
    public DMChannel getUserDMChannel(String userId) throws ApiException {
        ApiResponse<DMChannel> localVarResp = getUserDMChannelWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * DMチャンネル情報を取得
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     *
     * @param userId (required)
     * @return ApiResponse&lt;DMChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DMChannel> getUserDMChannelWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserDMChannelValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<DMChannel>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DMチャンネル情報を取得 (asynchronously)
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     *
     * @param userId    (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserDMChannelAsync(String userId, final ApiCallback<DMChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDMChannelValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<DMChannel>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for postMessage
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call postMessageCall(UUID channelId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postMessageRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/messages"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMessageValidateBeforeCall(UUID channelId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling postMessage(Async)");
        }


        okhttp3.Call localVarCall = postMessageCall(channelId, postMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * チャンネルにメッセージを投稿
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public Message postMessage(UUID channelId, PostMessageRequest postMessageRequest) throws ApiException {
        ApiResponse<Message> localVarResp = postMessageWithHttpInfo(channelId, postMessageRequest);
        return localVarResp.getData();
    }

    /**
     * チャンネルにメッセージを投稿
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Message> postMessageWithHttpInfo(UUID channelId, PostMessageRequest postMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = postMessageValidateBeforeCall(channelId, postMessageRequest, null);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルにメッセージを投稿 (asynchronously)
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call postMessageAsync(UUID channelId, PostMessageRequest postMessageRequest, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMessageValidateBeforeCall(channelId, postMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for setChannelSubscribers
     *
     * @param channelId                    チャンネルUUID (required)
     * @param putChannelSubscribersRequest (optional)
     * @param _callback                    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setChannelSubscribersCall(UUID channelId, PutChannelSubscribersRequest putChannelSubscribersRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putChannelSubscribersRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/subscribers"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChannelSubscribersValidateBeforeCall(UUID channelId, PutChannelSubscribersRequest putChannelSubscribersRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling setChannelSubscribers(Async)");
        }


        okhttp3.Call localVarCall = setChannelSubscribersCall(channelId, putChannelSubscribersRequest, _callback);
        return localVarCall;

    }

    /**
     * チャンネルの通知購読者を設定
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
     *
     * @param channelId                    チャンネルUUID (required)
     * @param putChannelSubscribersRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void setChannelSubscribers(UUID channelId, PutChannelSubscribersRequest putChannelSubscribersRequest) throws ApiException {
        setChannelSubscribersWithHttpInfo(channelId, putChannelSubscribersRequest);
    }

    /**
     * チャンネルの通知購読者を設定
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
     *
     * @param channelId                    チャンネルUUID (required)
     * @param putChannelSubscribersRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> setChannelSubscribersWithHttpInfo(UUID channelId, PutChannelSubscribersRequest putChannelSubscribersRequest) throws ApiException {
        okhttp3.Call localVarCall = setChannelSubscribersValidateBeforeCall(channelId, putChannelSubscribersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * チャンネルの通知購読者を設定 (asynchronously)
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
     *
     * @param channelId                    チャンネルUUID (required)
     * @param putChannelSubscribersRequest (optional)
     * @param _callback                    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したチャンネルの通知購読者は変更できません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setChannelSubscribersAsync(UUID channelId, PutChannelSubscribersRequest putChannelSubscribersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChannelSubscribersValidateBeforeCall(channelId, putChannelSubscribersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
