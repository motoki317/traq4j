/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;
import com.github.motoki317.traq4j.ProgressRequestBody;
import com.github.motoki317.traq4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import com.github.motoki317.traq4j.model.MessageStamp;
import com.github.motoki317.traq4j.model.PatchStampPaletteRequest;
import com.github.motoki317.traq4j.model.PatchStampRequest;
import com.github.motoki317.traq4j.model.PostMessageStampRequest;
import com.github.motoki317.traq4j.model.PostStampPaletteRequest;
import com.github.motoki317.traq4j.model.Stamp;
import com.github.motoki317.traq4j.model.StampHistoryEntry;
import com.github.motoki317.traq4j.model.StampPalette;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StampApi {
    private ApiClient localVarApiClient;

    public StampApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StampApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addMessageStamp
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addMessageStampCall(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postMessageStampRequest;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/stamps/{stampId}"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()))
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMessageStampValidateBeforeCall(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling addMessageStamp(Async)");
        }

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling addMessageStamp(Async)");
        }


        okhttp3.Call localVarCall = addMessageStampCall(messageId, stampId, postMessageStampRequest, _callback);
        return localVarCall;

    }

    /**
     * スタンプを押す
     * 指定したメッセージに指定したスタンプを押します。
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void addMessageStamp(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest) throws ApiException {
        addMessageStampWithHttpInfo(messageId, stampId, postMessageStampRequest);
    }

    /**
     * スタンプを押す
     * 指定したメッセージに指定したスタンプを押します。
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> addMessageStampWithHttpInfo(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest) throws ApiException {
        okhttp3.Call localVarCall = addMessageStampValidateBeforeCall(messageId, stampId, postMessageStampRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプを押す (asynchronously)
     * 指定したメッセージに指定したスタンプを押します。
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addMessageStampAsync(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMessageStampValidateBeforeCall(messageId, stampId, postMessageStampRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for changeStampImage
     *
     * @param stampId   スタンプUUID (required)
     * @param file      スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call changeStampImageCall(UUID stampId, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamps/{stampId}/image"
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeStampImageValidateBeforeCall(UUID stampId, File file, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling changeStampImage(Async)");
        }

        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling changeStampImage(Async)");
        }


        okhttp3.Call localVarCall = changeStampImageCall(stampId, file, _callback);
        return localVarCall;

    }

    /**
     * スタンプ画像を変更
     * 指定したスタンプの画像を変更します。
     *
     * @param stampId スタンプUUID (required)
     * @param file    スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public void changeStampImage(UUID stampId, File file) throws ApiException {
        changeStampImageWithHttpInfo(stampId, file);
    }

    /**
     * スタンプ画像を変更
     * 指定したスタンプの画像を変更します。
     *
     * @param stampId スタンプUUID (required)
     * @param file    スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> changeStampImageWithHttpInfo(UUID stampId, File file) throws ApiException {
        okhttp3.Call localVarCall = changeStampImageValidateBeforeCall(stampId, file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプ画像を変更 (asynchronously)
     * 指定したスタンプの画像を変更します。
     *
     * @param stampId   スタンプUUID (required)
     * @param file      スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call changeStampImageAsync(UUID stampId, File file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeStampImageValidateBeforeCall(stampId, file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for createStamp
     *
     * @param name      スタンプ名 (required)
     * @param file      スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createStampCall(String name, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStampValidateBeforeCall(String name, File file, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createStamp(Async)");
        }

        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling createStamp(Async)");
        }


        okhttp3.Call localVarCall = createStampCall(name, file, _callback);
        return localVarCall;

    }

    /**
     * スタンプを作成
     * スタンプを新規作成します。
     *
     * @param name スタンプ名 (required)
     * @param file スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @return Stamp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public Stamp createStamp(String name, File file) throws ApiException {
        ApiResponse<Stamp> localVarResp = createStampWithHttpInfo(name, file);
        return localVarResp.getData();
    }

    /**
     * スタンプを作成
     * スタンプを新規作成します。
     *
     * @param name スタンプ名 (required)
     * @param file スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @return ApiResponse&lt;Stamp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Stamp> createStampWithHttpInfo(String name, File file) throws ApiException {
        okhttp3.Call localVarCall = createStampValidateBeforeCall(name, file, null);
        Type localVarReturnType = new TypeToken<Stamp>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプを作成 (asynchronously)
     * スタンプを新規作成します。
     *
     * @param name      スタンプ名 (required)
     * @param file      スタンプ画像(1MBまでのpng, jpeg, gif) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createStampAsync(String name, File file, final ApiCallback<Stamp> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStampValidateBeforeCall(name, file, _callback);
        Type localVarReturnType = new TypeToken<Stamp>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createStampPalette
     *
     * @param postStampPaletteRequest (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createStampPaletteCall(PostStampPaletteRequest postStampPaletteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postStampPaletteRequest;

        // create path and map variables
        String localVarPath = "/stamp-palettes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStampPaletteValidateBeforeCall(PostStampPaletteRequest postStampPaletteRequest, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = createStampPaletteCall(postStampPaletteRequest, _callback);
        return localVarCall;

    }

    /**
     * スタンプパレットを作成
     * スタンプパレットを作成します。
     *
     * @param postStampPaletteRequest (optional)
     * @return StampPalette
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public StampPalette createStampPalette(PostStampPaletteRequest postStampPaletteRequest) throws ApiException {
        ApiResponse<StampPalette> localVarResp = createStampPaletteWithHttpInfo(postStampPaletteRequest);
        return localVarResp.getData();
    }

    /**
     * スタンプパレットを作成
     * スタンプパレットを作成します。
     *
     * @param postStampPaletteRequest (optional)
     * @return ApiResponse&lt;StampPalette&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<StampPalette> createStampPaletteWithHttpInfo(PostStampPaletteRequest postStampPaletteRequest) throws ApiException {
        okhttp3.Call localVarCall = createStampPaletteValidateBeforeCall(postStampPaletteRequest, null);
        Type localVarReturnType = new TypeToken<StampPalette>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプパレットを作成 (asynchronously)
     * スタンプパレットを作成します。
     *
     * @param postStampPaletteRequest (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createStampPaletteAsync(PostStampPaletteRequest postStampPaletteRequest, final ApiCallback<StampPalette> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStampPaletteValidateBeforeCall(postStampPaletteRequest, _callback);
        Type localVarReturnType = new TypeToken<StampPalette>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteStamp
     *
     * @param stampId   スタンプUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteStampCall(UUID stampId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamps/{stampId}"
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStampValidateBeforeCall(UUID stampId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling deleteStamp(Async)");
        }


        okhttp3.Call localVarCall = deleteStampCall(stampId, _callback);
        return localVarCall;

    }

    /**
     * スタンプを削除
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     *
     * @param stampId スタンプUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteStamp(UUID stampId) throws ApiException {
        deleteStampWithHttpInfo(stampId);
    }

    /**
     * スタンプを削除
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     *
     * @param stampId スタンプUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteStampWithHttpInfo(UUID stampId) throws ApiException {
        okhttp3.Call localVarCall = deleteStampValidateBeforeCall(stampId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプを削除 (asynchronously)
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     *
     * @param stampId   スタンプUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteStampAsync(UUID stampId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStampValidateBeforeCall(stampId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteStampPalette
     *
     * @param paletteId スタンプパレットUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteStampPaletteCall(UUID paletteId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamp-palettes/{paletteId}"
                .replaceAll("\\{" + "paletteId" + "\\}", localVarApiClient.escapeString(paletteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStampPaletteValidateBeforeCall(UUID paletteId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'paletteId' is set
        if (paletteId == null) {
            throw new ApiException("Missing the required parameter 'paletteId' when calling deleteStampPalette(Async)");
        }


        okhttp3.Call localVarCall = deleteStampPaletteCall(paletteId, _callback);
        return localVarCall;

    }

    /**
     * スタンプパレットを削除
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     *
     * @param paletteId スタンプパレットUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteStampPalette(UUID paletteId) throws ApiException {
        deleteStampPaletteWithHttpInfo(paletteId);
    }

    /**
     * スタンプパレットを削除
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     *
     * @param paletteId スタンプパレットUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteStampPaletteWithHttpInfo(UUID paletteId) throws ApiException {
        okhttp3.Call localVarCall = deleteStampPaletteValidateBeforeCall(paletteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプパレットを削除 (asynchronously)
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     *
     * @param paletteId スタンプパレットUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteStampPaletteAsync(UUID paletteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStampPaletteValidateBeforeCall(paletteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editStamp
     *
     * @param stampId           スタンプUUID (required)
     * @param patchStampRequest (optional)
     * @param _callback         Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプ情報が変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editStampCall(UUID stampId, PatchStampRequest patchStampRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchStampRequest;

        // create path and map variables
        String localVarPath = "/stamps/{stampId}"
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editStampValidateBeforeCall(UUID stampId, PatchStampRequest patchStampRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling editStamp(Async)");
        }


        okhttp3.Call localVarCall = editStampCall(stampId, patchStampRequest, _callback);
        return localVarCall;

    }

    /**
     * スタンプ情報を変更
     * 指定したスタンプの情報を変更します。
     *
     * @param stampId           スタンプUUID (required)
     * @param patchStampRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプ情報が変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * </table>
     */
    public void editStamp(UUID stampId, PatchStampRequest patchStampRequest) throws ApiException {
        editStampWithHttpInfo(stampId, patchStampRequest);
    }

    /**
     * スタンプ情報を変更
     * 指定したスタンプの情報を変更します。
     *
     * @param stampId           スタンプUUID (required)
     * @param patchStampRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプ情報が変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editStampWithHttpInfo(UUID stampId, PatchStampRequest patchStampRequest) throws ApiException {
        okhttp3.Call localVarCall = editStampValidateBeforeCall(stampId, patchStampRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプ情報を変更 (asynchronously)
     * 指定したスタンプの情報を変更します。
     *
     * @param stampId           スタンプUUID (required)
     * @param patchStampRequest (optional)
     * @param _callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプ情報が変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editStampAsync(UUID stampId, PatchStampRequest patchStampRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editStampValidateBeforeCall(stampId, patchStampRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editStampPalette
     *
     * @param paletteId                スタンプパレットUUID (required)
     * @param patchStampPaletteRequest (optional)
     * @param _callback                Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editStampPaletteCall(UUID paletteId, PatchStampPaletteRequest patchStampPaletteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchStampPaletteRequest;

        // create path and map variables
        String localVarPath = "/stamp-palettes/{paletteId}"
                .replaceAll("\\{" + "paletteId" + "\\}", localVarApiClient.escapeString(paletteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editStampPaletteValidateBeforeCall(UUID paletteId, PatchStampPaletteRequest patchStampPaletteRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'paletteId' is set
        if (paletteId == null) {
            throw new ApiException("Missing the required parameter 'paletteId' when calling editStampPalette(Async)");
        }


        okhttp3.Call localVarCall = editStampPaletteCall(paletteId, patchStampPaletteRequest, _callback);
        return localVarCall;

    }

    /**
     * スタンプパレットを編集
     * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
     *
     * @param paletteId                スタンプパレットUUID (required)
     * @param patchStampPaletteRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public void editStampPalette(UUID paletteId, PatchStampPaletteRequest patchStampPaletteRequest) throws ApiException {
        editStampPaletteWithHttpInfo(paletteId, patchStampPaletteRequest);
    }

    /**
     * スタンプパレットを編集
     * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
     *
     * @param paletteId                スタンプパレットUUID (required)
     * @param patchStampPaletteRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editStampPaletteWithHttpInfo(UUID paletteId, PatchStampPaletteRequest patchStampPaletteRequest) throws ApiException {
        okhttp3.Call localVarCall = editStampPaletteValidateBeforeCall(paletteId, patchStampPaletteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプパレットを編集 (asynchronously)
     * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
     *
     * @param paletteId                スタンプパレットUUID (required)
     * @param patchStampPaletteRequest (optional)
     * @param _callback                The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 対象のスタンプパレットを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editStampPaletteAsync(UUID paletteId, PatchStampPaletteRequest patchStampPaletteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editStampPaletteValidateBeforeCall(paletteId, patchStampPaletteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMessageStamps
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageStampsCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/stamps"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageStampsValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageStamps(Async)");
        }


        okhttp3.Call localVarCall = getMessageStampsCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * メッセージのスタンプリストを取得
     * 指定したメッセージに押されているスタンプのリストを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return List&lt;MessageStamp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public List<MessageStamp> getMessageStamps(UUID messageId) throws ApiException {
        ApiResponse<List<MessageStamp>> localVarResp = getMessageStampsWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * メッセージのスタンプリストを取得
     * 指定したメッセージに押されているスタンプのリストを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;List&lt;MessageStamp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<MessageStamp>> getMessageStampsWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = getMessageStampsValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<List<MessageStamp>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * メッセージのスタンプリストを取得 (asynchronously)
     * 指定したメッセージに押されているスタンプのリストを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageStampsAsync(UUID messageId, final ApiCallback<List<MessageStamp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageStampsValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<List<MessageStamp>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMyStampHistory
     *
     * @param limit     件数 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMyStampHistoryCall(Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/stamp-history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyStampHistoryValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getMyStampHistoryCall(limit, _callback);
        return localVarCall;

    }

    /**
     * スタンプ履歴を取得
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     *
     * @param limit 件数 (optional)
     * @return List&lt;StampHistoryEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public List<StampHistoryEntry> getMyStampHistory(Integer limit) throws ApiException {
        ApiResponse<List<StampHistoryEntry>> localVarResp = getMyStampHistoryWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * スタンプ履歴を取得
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     *
     * @param limit 件数 (optional)
     * @return ApiResponse&lt;List&lt;StampHistoryEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<StampHistoryEntry>> getMyStampHistoryWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMyStampHistoryValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<StampHistoryEntry>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプ履歴を取得 (asynchronously)
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     *
     * @param limit     件数 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMyStampHistoryAsync(Integer limit, final ApiCallback<List<StampHistoryEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyStampHistoryValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<StampHistoryEntry>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getStamp
     *
     * @param stampId   スタンプUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampCall(UUID stampId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamps/{stampId}"
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStampValidateBeforeCall(UUID stampId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling getStamp(Async)");
        }


        okhttp3.Call localVarCall = getStampCall(stampId, _callback);
        return localVarCall;

    }

    /**
     * スタンプ情報を取得
     * 指定したスタンプの情報を取得します。
     *
     * @param stampId スタンプUUID (required)
     * @return Stamp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public Stamp getStamp(UUID stampId) throws ApiException {
        ApiResponse<Stamp> localVarResp = getStampWithHttpInfo(stampId);
        return localVarResp.getData();
    }

    /**
     * スタンプ情報を取得
     * 指定したスタンプの情報を取得します。
     *
     * @param stampId スタンプUUID (required)
     * @return ApiResponse&lt;Stamp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Stamp> getStampWithHttpInfo(UUID stampId) throws ApiException {
        okhttp3.Call localVarCall = getStampValidateBeforeCall(stampId, null);
        Type localVarReturnType = new TypeToken<Stamp>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプ情報を取得 (asynchronously)
     * 指定したスタンプの情報を取得します。
     *
     * @param stampId   スタンプUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampAsync(UUID stampId, final ApiCallback<Stamp> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStampValidateBeforeCall(stampId, _callback);
        Type localVarReturnType = new TypeToken<Stamp>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getStampImage
     *
     * @param stampId   スタンプUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampImageCall(UUID stampId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamps/{stampId}/image"
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "image/png", "image/gif", "image/jpeg"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStampImageValidateBeforeCall(UUID stampId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling getStampImage(Async)");
        }


        okhttp3.Call localVarCall = getStampImageCall(stampId, _callback);
        return localVarCall;

    }

    /**
     * スタンプ画像を取得
     * 指定したIDのスタンプ画像を返します。
     *
     * @param stampId スタンプUUID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public File getStampImage(UUID stampId) throws ApiException {
        ApiResponse<File> localVarResp = getStampImageWithHttpInfo(stampId);
        return localVarResp.getData();
    }

    /**
     * スタンプ画像を取得
     * 指定したIDのスタンプ画像を返します。
     *
     * @param stampId スタンプUUID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<File> getStampImageWithHttpInfo(UUID stampId) throws ApiException {
        okhttp3.Call localVarCall = getStampImageValidateBeforeCall(stampId, null);
        Type localVarReturnType = new TypeToken<File>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプ画像を取得 (asynchronously)
     * 指定したIDのスタンプ画像を返します。
     *
     * @param stampId   スタンプUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampImageAsync(UUID stampId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStampImageValidateBeforeCall(stampId, _callback);
        Type localVarReturnType = new TypeToken<File>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getStampPalette
     *
     * @param paletteId スタンプパレットUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampPaletteCall(UUID paletteId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamp-palettes/{paletteId}"
                .replaceAll("\\{" + "paletteId" + "\\}", localVarApiClient.escapeString(paletteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStampPaletteValidateBeforeCall(UUID paletteId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'paletteId' is set
        if (paletteId == null) {
            throw new ApiException("Missing the required parameter 'paletteId' when calling getStampPalette(Async)");
        }


        okhttp3.Call localVarCall = getStampPaletteCall(paletteId, _callback);
        return localVarCall;

    }

    /**
     * スタンプパレットを取得
     * 指定したスタンプパレットの情報を取得します。
     *
     * @param paletteId スタンプパレットUUID (required)
     * @return StampPalette
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public StampPalette getStampPalette(UUID paletteId) throws ApiException {
        ApiResponse<StampPalette> localVarResp = getStampPaletteWithHttpInfo(paletteId);
        return localVarResp.getData();
    }

    /**
     * スタンプパレットを取得
     * 指定したスタンプパレットの情報を取得します。
     *
     * @param paletteId スタンプパレットUUID (required)
     * @return ApiResponse&lt;StampPalette&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<StampPalette> getStampPaletteWithHttpInfo(UUID paletteId) throws ApiException {
        okhttp3.Call localVarCall = getStampPaletteValidateBeforeCall(paletteId, null);
        Type localVarReturnType = new TypeToken<StampPalette>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプパレットを取得 (asynchronously)
     * 指定したスタンプパレットの情報を取得します。
     *
     * @param paletteId スタンプパレットUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampPaletteAsync(UUID paletteId, final ApiCallback<StampPalette> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStampPaletteValidateBeforeCall(paletteId, _callback);
        Type localVarReturnType = new TypeToken<StampPalette>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getStampPalettes
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampPalettesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamp-palettes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStampPalettesValidateBeforeCall(final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getStampPalettesCall(_callback);
        return localVarCall;

    }

    /**
     * スタンプパレットのリストを取得
     * 自身が所有しているスタンプパレットのリストを取得します。
     *
     * @return List&lt;StampPalette&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public List<StampPalette> getStampPalettes() throws ApiException {
        ApiResponse<List<StampPalette>> localVarResp = getStampPalettesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * スタンプパレットのリストを取得
     * 自身が所有しているスタンプパレットのリストを取得します。
     *
     * @return ApiResponse&lt;List&lt;StampPalette&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<StampPalette>> getStampPalettesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStampPalettesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<StampPalette>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプパレットのリストを取得 (asynchronously)
     * 自身が所有しているスタンプパレットのリストを取得します。
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampPalettesAsync(final ApiCallback<List<StampPalette>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStampPalettesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<StampPalette>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getStamps
     *
     * @param includeUnicode Unicode絵文字を含ませるかどうか (optional, default to true)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampsCall(Boolean includeUnicode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stamps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeUnicode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-unicode", includeUnicode));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStampsValidateBeforeCall(Boolean includeUnicode, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getStampsCall(includeUnicode, _callback);
        return localVarCall;

    }

    /**
     * スタンプリストを取得
     * スタンプのリストを取得します。
     *
     * @param includeUnicode Unicode絵文字を含ませるかどうか (optional, default to true)
     * @return List&lt;Stamp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public List<Stamp> getStamps(Boolean includeUnicode) throws ApiException {
        ApiResponse<List<Stamp>> localVarResp = getStampsWithHttpInfo(includeUnicode);
        return localVarResp.getData();
    }

    /**
     * スタンプリストを取得
     * スタンプのリストを取得します。
     *
     * @param includeUnicode Unicode絵文字を含ませるかどうか (optional, default to true)
     * @return ApiResponse&lt;List&lt;Stamp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Stamp>> getStampsWithHttpInfo(Boolean includeUnicode) throws ApiException {
        okhttp3.Call localVarCall = getStampsValidateBeforeCall(includeUnicode, null);
        Type localVarReturnType = new TypeToken<List<Stamp>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * スタンプリストを取得 (asynchronously)
     * スタンプのリストを取得します。
     *
     * @param includeUnicode Unicode絵文字を含ませるかどうか (optional, default to true)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getStampsAsync(Boolean includeUnicode, final ApiCallback<List<Stamp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStampsValidateBeforeCall(includeUnicode, _callback);
        Type localVarReturnType = new TypeToken<List<Stamp>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeMessageStamp
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeMessageStampCall(UUID messageId, UUID stampId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/stamps/{stampId}"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()))
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMessageStampValidateBeforeCall(UUID messageId, UUID stampId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling removeMessageStamp(Async)");
        }

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling removeMessageStamp(Async)");
        }


        okhttp3.Call localVarCall = removeMessageStampCall(messageId, stampId, _callback);
        return localVarCall;

    }

    /**
     * スタンプを消す
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void removeMessageStamp(UUID messageId, UUID stampId) throws ApiException {
        removeMessageStampWithHttpInfo(messageId, stampId);
    }

    /**
     * スタンプを消す
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> removeMessageStampWithHttpInfo(UUID messageId, UUID stampId) throws ApiException {
        okhttp3.Call localVarCall = removeMessageStampValidateBeforeCall(messageId, stampId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプを消す (asynchronously)
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeMessageStampAsync(UUID messageId, UUID stampId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMessageStampValidateBeforeCall(messageId, stampId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
