/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;

import com.google.gson.reflect.TypeToken;


import com.github.motoki317.traq4j.model.ActiveOAuth2Token;
import com.github.motoki317.traq4j.model.OAuth2Client;
import com.github.motoki317.traq4j.model.OAuth2ClientDetail;
import com.github.motoki317.traq4j.model.OAuth2Prompt;
import com.github.motoki317.traq4j.model.OAuth2ResponseType;
import com.github.motoki317.traq4j.model.OAuth2Token;
import com.github.motoki317.traq4j.model.PatchClientRequest;
import com.github.motoki317.traq4j.model.PostClientRequest;
import com.github.motoki317.traq4j.model.PostOAuth2Revoke;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Oauth2Api {
    private ApiClient localVarApiClient;

    public Oauth2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Oauth2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createClient
     * @param postClientRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientCall(PostClientRequest postClientRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postClientRequest;

        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClientValidateBeforeCall(PostClientRequest postClientRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createClientCall(postClientRequest, _callback);
        return localVarCall;

    }

    /**
     * OAuth2クライアントを作成
     * OAuth2クライアントを作成します。
     * @param postClientRequest  (optional)
     * @return OAuth2ClientDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2ClientDetail createClient(PostClientRequest postClientRequest) throws ApiException {
        ApiResponse<OAuth2ClientDetail> localVarResp = createClientWithHttpInfo(postClientRequest);
        return localVarResp.getData();
    }

    /**
     * OAuth2クライアントを作成
     * OAuth2クライアントを作成します。
     * @param postClientRequest  (optional)
     * @return ApiResponse&lt;OAuth2ClientDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2ClientDetail> createClientWithHttpInfo(PostClientRequest postClientRequest) throws ApiException {
        okhttp3.Call localVarCall = createClientValidateBeforeCall(postClientRequest, null);
        Type localVarReturnType = new TypeToken<OAuth2ClientDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OAuth2クライアントを作成 (asynchronously)
     * OAuth2クライアントを作成します。
     * @param postClientRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientAsync(PostClientRequest postClientRequest, final ApiCallback<OAuth2ClientDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClientValidateBeforeCall(postClientRequest, _callback);
        Type localVarReturnType = new TypeToken<OAuth2ClientDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteClient
     * @param clientId OAuth2クライアントUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClientCall(String clientId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClientValidateBeforeCall(String clientId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteClient(Async)");
        }
        

        okhttp3.Call localVarCall = deleteClientCall(clientId, _callback);
        return localVarCall;

    }

    /**
     * OAuth2クライアントを削除
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @param clientId OAuth2クライアントUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void deleteClient(String clientId) throws ApiException {
        deleteClientWithHttpInfo(clientId);
    }

    /**
     * OAuth2クライアントを削除
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @param clientId OAuth2クライアントUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteClientWithHttpInfo(String clientId) throws ApiException {
        okhttp3.Call localVarCall = deleteClientValidateBeforeCall(clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OAuth2クライアントを削除 (asynchronously)
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @param clientId OAuth2クライアントUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClientAsync(String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClientValidateBeforeCall(clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editClient
     * @param clientId OAuth2クライアントUUID (required)
     * @param patchClientRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editClientCall(String clientId, PatchClientRequest patchClientRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchClientRequest;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editClientValidateBeforeCall(String clientId, PatchClientRequest patchClientRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling editClient(Async)");
        }
        

        okhttp3.Call localVarCall = editClientCall(clientId, patchClientRequest, _callback);
        return localVarCall;

    }

    /**
     * OAuth2クライアント情報を変更
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @param clientId OAuth2クライアントUUID (required)
     * @param patchClientRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void editClient(String clientId, PatchClientRequest patchClientRequest) throws ApiException {
        editClientWithHttpInfo(clientId, patchClientRequest);
    }

    /**
     * OAuth2クライアント情報を変更
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @param clientId OAuth2クライアントUUID (required)
     * @param patchClientRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editClientWithHttpInfo(String clientId, PatchClientRequest patchClientRequest) throws ApiException {
        okhttp3.Call localVarCall = editClientValidateBeforeCall(clientId, patchClientRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OAuth2クライアント情報を変更 (asynchronously)
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @param clientId OAuth2クライアントUUID (required)
     * @param patchClientRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更できました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found OAuth2クライアントが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editClientAsync(String clientId, PatchClientRequest patchClientRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editClientValidateBeforeCall(clientId, patchClientRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClient
     * @param clientId OAuth2クライアントUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientCall(String clientId, Boolean detail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientValidateBeforeCall(String clientId, Boolean detail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClient(Async)");
        }
        

        okhttp3.Call localVarCall = getClientCall(clientId, detail, _callback);
        return localVarCall;

    }

    /**
     * OAuth2クライアント情報を取得
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @param clientId OAuth2クライアントUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @return OneOfOAuth2ClientOAuth2ClientDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object getClient(String clientId, Boolean detail) throws ApiException {
        ApiResponse<Object> localVarResp = getClientWithHttpInfo(clientId, detail);
        return localVarResp.getData();
    }

    /**
     * OAuth2クライアント情報を取得
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @param clientId OAuth2クライアントUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @return ApiResponse&lt;OneOfOAuth2ClientOAuth2ClientDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getClientWithHttpInfo(String clientId, Boolean detail) throws ApiException {
        okhttp3.Call localVarCall = getClientValidateBeforeCall(clientId, detail, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OAuth2クライアント情報を取得 (asynchronously)
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @param clientId OAuth2クライアントUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientAsync(String clientId, Boolean detail, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientValidateBeforeCall(clientId, detail, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClients
     * @param all 全てのクライアントを取得するかどうか (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientsCall(Boolean all, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientsValidateBeforeCall(Boolean all, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getClientsCall(all, _callback);
        return localVarCall;

    }

    /**
     * OAuth2クライアントのリストを取得
     * 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
     * @param all 全てのクライアントを取得するかどうか (optional, default to false)
     * @return List&lt;OAuth2Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<OAuth2Client> getClients(Boolean all) throws ApiException {
        ApiResponse<List<OAuth2Client>> localVarResp = getClientsWithHttpInfo(all);
        return localVarResp.getData();
    }

    /**
     * OAuth2クライアントのリストを取得
     * 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
     * @param all 全てのクライアントを取得するかどうか (optional, default to false)
     * @return ApiResponse&lt;List&lt;OAuth2Client&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OAuth2Client>> getClientsWithHttpInfo(Boolean all) throws ApiException {
        okhttp3.Call localVarCall = getClientsValidateBeforeCall(all, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OAuth2クライアントのリストを取得 (asynchronously)
     * 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
     * @param all 全てのクライアントを取得するかどうか (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientsAsync(Boolean all, final ApiCallback<List<OAuth2Client>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientsValidateBeforeCall(all, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyTokens
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyTokensCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyTokensValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMyTokensCall(_callback);
        return localVarCall;

    }

    /**
     * 有効トークンのリストを取得
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @return List&lt;ActiveOAuth2Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ActiveOAuth2Token> getMyTokens() throws ApiException {
        ApiResponse<List<ActiveOAuth2Token>> localVarResp = getMyTokensWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 有効トークンのリストを取得
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @return ApiResponse&lt;List&lt;ActiveOAuth2Token&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActiveOAuth2Token>> getMyTokensWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMyTokensValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ActiveOAuth2Token>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 有効トークンのリストを取得 (asynchronously)
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyTokensAsync(final ApiCallback<List<ActiveOAuth2Token>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyTokensValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ActiveOAuth2Token>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOAuth2Authorize
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2AuthorizeCall(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (codeChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code_challenge", codeChallenge));
        }

        if (codeChallengeMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code_challenge_method", codeChallengeMethod));
        }

        if (nonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonce", nonce));
        }

        if (prompt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prompt", prompt));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuth2AuthorizeValidateBeforeCall(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getOAuth2Authorize(Async)");
        }
        

        okhttp3.Call localVarCall = getOAuth2AuthorizeCall(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, _callback);
        return localVarCall;

    }

    /**
     * OAuth2 認可エンドポイント
     * OAuth2 認可エンドポイント
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public void getOAuth2Authorize(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt) throws ApiException {
        getOAuth2AuthorizeWithHttpInfo(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt);
    }

    /**
     * OAuth2 認可エンドポイント
     * OAuth2 認可エンドポイント
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOAuth2AuthorizeWithHttpInfo(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt) throws ApiException {
        okhttp3.Call localVarCall = getOAuth2AuthorizeValidateBeforeCall(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OAuth2 認可エンドポイント (asynchronously)
     * OAuth2 認可エンドポイント
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2AuthorizeAsync(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuth2AuthorizeValidateBeforeCall(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOAuth2Authorize
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOAuth2AuthorizeCall(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (responseType != null) {
            localVarFormParams.put("response_type", responseType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (codeChallenge != null) {
            localVarFormParams.put("code_challenge", codeChallenge);
        }

        if (codeChallengeMethod != null) {
            localVarFormParams.put("code_challenge_method", codeChallengeMethod);
        }

        if (nonce != null) {
            localVarFormParams.put("nonce", nonce);
        }

        if (prompt != null) {
            localVarFormParams.put("prompt", prompt);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOAuth2AuthorizeValidateBeforeCall(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling postOAuth2Authorize(Async)");
        }
        

        okhttp3.Call localVarCall = postOAuth2AuthorizeCall(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, _callback);
        return localVarCall;

    }

    /**
     * OAuth2 認可エンドポイント
     * OAuth2 認可エンドポイント
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public void postOAuth2Authorize(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt) throws ApiException {
        postOAuth2AuthorizeWithHttpInfo(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt);
    }

    /**
     * OAuth2 認可エンドポイント
     * OAuth2 認可エンドポイント
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOAuth2AuthorizeWithHttpInfo(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt) throws ApiException {
        okhttp3.Call localVarCall = postOAuth2AuthorizeValidateBeforeCall(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OAuth2 認可エンドポイント (asynchronously)
     * OAuth2 認可エンドポイント
     * @param clientId  (required)
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> 結果に応じてリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOAuth2AuthorizeAsync(String clientId, OAuth2ResponseType responseType, String redirectUri, String scope, String state, String codeChallenge, String codeChallengeMethod, String nonce, OAuth2Prompt prompt, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOAuth2AuthorizeValidateBeforeCall(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOAuth2AuthorizeDecide
     * @param submit 承諾する場合は\\\&quot;approve\\\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> RedirectURIに結果をリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOAuth2AuthorizeDecideCall(String submit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/authorize/decide";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (submit != null) {
            localVarFormParams.put("submit", submit);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOAuth2AuthorizeDecideValidateBeforeCall(String submit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'submit' is set
        if (submit == null) {
            throw new ApiException("Missing the required parameter 'submit' when calling postOAuth2AuthorizeDecide(Async)");
        }
        

        okhttp3.Call localVarCall = postOAuth2AuthorizeDecideCall(submit, _callback);
        return localVarCall;

    }

    /**
     * OAuth2 認可承諾API
     * OAuth2 認可承諾
     * @param submit 承諾する場合は\\\&quot;approve\\\&quot; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> RedirectURIに結果をリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public void postOAuth2AuthorizeDecide(String submit) throws ApiException {
        postOAuth2AuthorizeDecideWithHttpInfo(submit);
    }

    /**
     * OAuth2 認可承諾API
     * OAuth2 認可承諾
     * @param submit 承諾する場合は\\\&quot;approve\\\&quot; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> RedirectURIに結果をリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOAuth2AuthorizeDecideWithHttpInfo(String submit) throws ApiException {
        okhttp3.Call localVarCall = postOAuth2AuthorizeDecideValidateBeforeCall(submit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OAuth2 認可承諾API (asynchronously)
     * OAuth2 認可承諾
     * @param submit 承諾する場合は\\\&quot;approve\\\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> RedirectURIに結果をリダイレクトします。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> リクエストが不正です。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> リクエストが許可されていません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOAuth2AuthorizeDecideAsync(String submit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOAuth2AuthorizeDecideValidateBeforeCall(submit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOAuth2Token
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param clientId  (optional)
     * @param codeVerifier  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @param scope  (optional)
     * @param refreshToken  (optional)
     * @param clientSecret  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> トークンが正常に発行されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOAuth2TokenCall(String grantType, String code, String redirectUri, String clientId, String codeVerifier, String username, String password, String scope, String refreshToken, String clientSecret, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (codeVerifier != null) {
            localVarFormParams.put("code_verifier", codeVerifier);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOAuth2TokenValidateBeforeCall(String grantType, String code, String redirectUri, String clientId, String codeVerifier, String username, String password, String scope, String refreshToken, String clientSecret, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling postOAuth2Token(Async)");
        }
        

        okhttp3.Call localVarCall = postOAuth2TokenCall(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, _callback);
        return localVarCall;

    }

    /**
     * OAuth2 トークンエンドポイント
     * OAuth2 トークンエンドポイント
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param clientId  (optional)
     * @param codeVerifier  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @param scope  (optional)
     * @param refreshToken  (optional)
     * @param clientSecret  (optional)
     * @return OAuth2Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> トークンが正常に発行されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Token postOAuth2Token(String grantType, String code, String redirectUri, String clientId, String codeVerifier, String username, String password, String scope, String refreshToken, String clientSecret) throws ApiException {
        ApiResponse<OAuth2Token> localVarResp = postOAuth2TokenWithHttpInfo(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret);
        return localVarResp.getData();
    }

    /**
     * OAuth2 トークンエンドポイント
     * OAuth2 トークンエンドポイント
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param clientId  (optional)
     * @param codeVerifier  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @param scope  (optional)
     * @param refreshToken  (optional)
     * @param clientSecret  (optional)
     * @return ApiResponse&lt;OAuth2Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> トークンが正常に発行されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Token> postOAuth2TokenWithHttpInfo(String grantType, String code, String redirectUri, String clientId, String codeVerifier, String username, String password, String scope, String refreshToken, String clientSecret) throws ApiException {
        okhttp3.Call localVarCall = postOAuth2TokenValidateBeforeCall(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, null);
        Type localVarReturnType = new TypeToken<OAuth2Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OAuth2 トークンエンドポイント (asynchronously)
     * OAuth2 トークンエンドポイント
     * @param grantType  (required)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param clientId  (optional)
     * @param codeVerifier  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @param scope  (optional)
     * @param refreshToken  (optional)
     * @param clientSecret  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> トークンが正常に発行されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> トークン発行に失敗しました。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOAuth2TokenAsync(String grantType, String code, String redirectUri, String clientId, String codeVerifier, String username, String password, String scope, String refreshToken, String clientSecret, final ApiCallback<OAuth2Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOAuth2TokenValidateBeforeCall(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeMyToken
     * @param tokenId OAuth2トークンUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 取り消しました。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeMyTokenCall(UUID tokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/tokens/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeMyTokenValidateBeforeCall(UUID tokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling revokeMyToken(Async)");
        }
        

        okhttp3.Call localVarCall = revokeMyTokenCall(tokenId, _callback);
        return localVarCall;

    }

    /**
     * トークンの認可を取り消す
     * 自分の指定したトークンの認可を取り消します。
     * @param tokenId OAuth2トークンUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 取り消しました。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void revokeMyToken(UUID tokenId) throws ApiException {
        revokeMyTokenWithHttpInfo(tokenId);
    }

    /**
     * トークンの認可を取り消す
     * 自分の指定したトークンの認可を取り消します。
     * @param tokenId OAuth2トークンUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 取り消しました。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeMyTokenWithHttpInfo(UUID tokenId) throws ApiException {
        okhttp3.Call localVarCall = revokeMyTokenValidateBeforeCall(tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * トークンの認可を取り消す (asynchronously)
     * 自分の指定したトークンの認可を取り消します。
     * @param tokenId OAuth2トークンUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 取り消しました。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeMyTokenAsync(UUID tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeMyTokenValidateBeforeCall(tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeOAuth2Token
     * @param postOAuth2Revoke  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2TokenCall(PostOAuth2Revoke postOAuth2Revoke, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postOAuth2Revoke;

        // create path and map variables
        String localVarPath = "/oauth2/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeOAuth2TokenValidateBeforeCall(PostOAuth2Revoke postOAuth2Revoke, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = revokeOAuth2TokenCall(postOAuth2Revoke, _callback);
        return localVarCall;

    }

    /**
     * OAuth2 トークン無効化エンドポイント
     * OAuth2 トークン無効化エンドポイント
     * @param postOAuth2Revoke  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void revokeOAuth2Token(PostOAuth2Revoke postOAuth2Revoke) throws ApiException {
        revokeOAuth2TokenWithHttpInfo(postOAuth2Revoke);
    }

    /**
     * OAuth2 トークン無効化エンドポイント
     * OAuth2 トークン無効化エンドポイント
     * @param postOAuth2Revoke  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeOAuth2TokenWithHttpInfo(PostOAuth2Revoke postOAuth2Revoke) throws ApiException {
        okhttp3.Call localVarCall = revokeOAuth2TokenValidateBeforeCall(postOAuth2Revoke, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OAuth2 トークン無効化エンドポイント (asynchronously)
     * OAuth2 トークン無効化エンドポイント
     * @param postOAuth2Revoke  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2TokenAsync(PostOAuth2Revoke postOAuth2Revoke, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeOAuth2TokenValidateBeforeCall(postOAuth2Revoke, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
