/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.github.motoki317.traq4j.JSON;

/**
 * 未読チャンネル情報
 */
@ApiModel(description = "未読チャンネル情報")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T02:01:01.991892Z[Etc/UTC]")
public class UnreadChannel {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private UUID channelId;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_NOTICEABLE = "noticeable";
  @SerializedName(SERIALIZED_NAME_NOTICEABLE)
  private Boolean noticeable;

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  private OffsetDateTime since;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public UnreadChannel() { 
  }

  public UnreadChannel channelId(UUID channelId) {
    
    this.channelId = channelId;
    return this;
  }

   /**
   * チャンネルUUID
   * @return channelId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "チャンネルUUID")

  public UUID getChannelId() {
    return channelId;
  }


  public void setChannelId(UUID channelId) {
    this.channelId = channelId;
  }


  public UnreadChannel count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * 未読メッセージ数
   * @return count
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "未読メッセージ数")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public UnreadChannel noticeable(Boolean noticeable) {
    
    this.noticeable = noticeable;
    return this;
  }

   /**
   * 自分宛てメッセージが含まれているかどうか
   * @return noticeable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "自分宛てメッセージが含まれているかどうか")

  public Boolean getNoticeable() {
    return noticeable;
  }


  public void setNoticeable(Boolean noticeable) {
    this.noticeable = noticeable;
  }


  public UnreadChannel since(OffsetDateTime since) {
    
    this.since = since;
    return this;
  }

   /**
   * チャンネルの最古の未読メッセージの日時
   * @return since
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "チャンネルの最古の未読メッセージの日時")

  public OffsetDateTime getSince() {
    return since;
  }


  public void setSince(OffsetDateTime since) {
    this.since = since;
  }


  public UnreadChannel updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * チャンネルの最新の未読メッセージの日時
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "チャンネルの最新の未読メッセージの日時")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnreadChannel unreadChannel = (UnreadChannel) o;
    return Objects.equals(this.channelId, unreadChannel.channelId) &&
        Objects.equals(this.count, unreadChannel.count) &&
        Objects.equals(this.noticeable, unreadChannel.noticeable) &&
        Objects.equals(this.since, unreadChannel.since) &&
        Objects.equals(this.updatedAt, unreadChannel.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, count, noticeable, since, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnreadChannel {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    noticeable: ").append(toIndentedString(noticeable)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelId");
    openapiFields.add("count");
    openapiFields.add("noticeable");
    openapiFields.add("since");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channelId");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("noticeable");
    openapiRequiredFields.add("since");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UnreadChannel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UnreadChannel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnreadChannel is not found in the empty JSON string", UnreadChannel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UnreadChannel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnreadChannel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UnreadChannel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnreadChannel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnreadChannel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnreadChannel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnreadChannel.class));

       return (TypeAdapter<T>) new TypeAdapter<UnreadChannel>() {
           @Override
           public void write(JsonWriter out, UnreadChannel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnreadChannel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UnreadChannel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UnreadChannel
  * @throws IOException if the JSON string is invalid with respect to UnreadChannel
  */
  public static UnreadChannel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnreadChannel.class);
  }

 /**
  * Convert an instance of UnreadChannel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

