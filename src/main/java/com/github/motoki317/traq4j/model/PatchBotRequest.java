/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.motoki317.traq4j.model.BotMode;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.github.motoki317.traq4j.JSON;

/**
 * BOT情報変更リクエスト
 */
@ApiModel(description = "BOT情報変更リクエスト")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T02:01:01.991892Z[Etc/UTC]")
public class PatchBotRequest {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRIVILEGED = "privileged";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED)
  private Boolean privileged;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private BotMode mode;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private URI endpoint;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developerId";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private UUID developerId;

  public static final String SERIALIZED_NAME_SUBSCRIBE_EVENTS = "subscribeEvents";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE_EVENTS)
  private List<String> subscribeEvents = null;

  public PatchBotRequest() { 
  }

  public PatchBotRequest displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * BOTユーザー表示名
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BOTユーザー表示名")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PatchBotRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * BOTの説明
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BOTの説明")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public PatchBotRequest privileged(Boolean privileged) {
    
    this.privileged = privileged;
    return this;
  }

   /**
   * 特権
   * @return privileged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "特権")

  public Boolean getPrivileged() {
    return privileged;
  }


  public void setPrivileged(Boolean privileged) {
    this.privileged = privileged;
  }


  public PatchBotRequest mode(BotMode mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BotMode getMode() {
    return mode;
  }


  public void setMode(BotMode mode) {
    this.mode = mode;
  }


  public PatchBotRequest endpoint(URI endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * BOTサーバーエンドポイント
   * @return endpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BOTサーバーエンドポイント")

  public URI getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(URI endpoint) {
    this.endpoint = endpoint;
  }


  public PatchBotRequest developerId(UUID developerId) {
    
    this.developerId = developerId;
    return this;
  }

   /**
   * 移譲先の開発者UUID
   * @return developerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "移譲先の開発者UUID")

  public UUID getDeveloperId() {
    return developerId;
  }


  public void setDeveloperId(UUID developerId) {
    this.developerId = developerId;
  }


  public PatchBotRequest subscribeEvents(List<String> subscribeEvents) {
    
    this.subscribeEvents = subscribeEvents;
    return this;
  }

  public PatchBotRequest addSubscribeEventsItem(String subscribeEventsItem) {
    if (this.subscribeEvents == null) {
      this.subscribeEvents = new ArrayList<>();
    }
    this.subscribeEvents.add(subscribeEventsItem);
    return this;
  }

   /**
   * 購読するイベント
   * @return subscribeEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "購読するイベント")

  public List<String> getSubscribeEvents() {
    return subscribeEvents;
  }


  public void setSubscribeEvents(List<String> subscribeEvents) {
    this.subscribeEvents = subscribeEvents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchBotRequest patchBotRequest = (PatchBotRequest) o;
    return Objects.equals(this.displayName, patchBotRequest.displayName) &&
        Objects.equals(this.description, patchBotRequest.description) &&
        Objects.equals(this.privileged, patchBotRequest.privileged) &&
        Objects.equals(this.mode, patchBotRequest.mode) &&
        Objects.equals(this.endpoint, patchBotRequest.endpoint) &&
        Objects.equals(this.developerId, patchBotRequest.developerId) &&
        Objects.equals(this.subscribeEvents, patchBotRequest.subscribeEvents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, description, privileged, mode, endpoint, developerId, subscribeEvents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchBotRequest {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    subscribeEvents: ").append(toIndentedString(subscribeEvents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("privileged");
    openapiFields.add("mode");
    openapiFields.add("endpoint");
    openapiFields.add("developerId");
    openapiFields.add("subscribeEvents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatchBotRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PatchBotRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchBotRequest is not found in the empty JSON string", PatchBotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatchBotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchBotRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if (jsonObj.get("developerId") != null && !jsonObj.get("developerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerId").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("subscribeEvents") != null && !jsonObj.get("subscribeEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribeEvents` to be an array in the JSON string but got `%s`", jsonObj.get("subscribeEvents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchBotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchBotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchBotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchBotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchBotRequest>() {
           @Override
           public void write(JsonWriter out, PatchBotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchBotRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatchBotRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatchBotRequest
  * @throws IOException if the JSON string is invalid with respect to PatchBotRequest
  */
  public static PatchBotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchBotRequest.class);
  }

 /**
  * Convert an instance of PatchBotRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

