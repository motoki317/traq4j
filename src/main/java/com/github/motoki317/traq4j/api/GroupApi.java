/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;
import com.github.motoki317.traq4j.ProgressRequestBody;
import com.github.motoki317.traq4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.motoki317.traq4j.model.PatchGroupMemberRequest;
import com.github.motoki317.traq4j.model.PatchUserGroupRequest;
import com.github.motoki317.traq4j.model.PostUserGroupAdminRequest;
import com.github.motoki317.traq4j.model.PostUserGroupRequest;

import java.util.UUID;

import com.github.motoki317.traq4j.model.UserGroup;
import com.github.motoki317.traq4j.model.UserGroupMember;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupApi {
    private ApiClient localVarApiClient;

    public GroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addUserGroupAdmin
     *
     * @param groupId                   ユーザーグループUUID (required)
     * @param postUserGroupAdminRequest (optional)
     * @param _callback                 Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addUserGroupAdminCall(UUID groupId, PostUserGroupAdminRequest postUserGroupAdminRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postUserGroupAdminRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/admins"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserGroupAdminValidateBeforeCall(UUID groupId, PostUserGroupAdminRequest postUserGroupAdminRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addUserGroupAdmin(Async)");
        }


        okhttp3.Call localVarCall = addUserGroupAdminCall(groupId, postUserGroupAdminRequest, _callback);
        return localVarCall;

    }

    /**
     * グループ管理者を追加
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId                   ユーザーグループUUID (required)
     * @param postUserGroupAdminRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void addUserGroupAdmin(UUID groupId, PostUserGroupAdminRequest postUserGroupAdminRequest) throws ApiException {
        addUserGroupAdminWithHttpInfo(groupId, postUserGroupAdminRequest);
    }

    /**
     * グループ管理者を追加
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId                   ユーザーグループUUID (required)
     * @param postUserGroupAdminRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> addUserGroupAdminWithHttpInfo(UUID groupId, PostUserGroupAdminRequest postUserGroupAdminRequest) throws ApiException {
        okhttp3.Call localVarCall = addUserGroupAdminValidateBeforeCall(groupId, postUserGroupAdminRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * グループ管理者を追加 (asynchronously)
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId                   ユーザーグループUUID (required)
     * @param postUserGroupAdminRequest (optional)
     * @param _callback                 The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addUserGroupAdminAsync(UUID groupId, PostUserGroupAdminRequest postUserGroupAdminRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserGroupAdminValidateBeforeCall(groupId, postUserGroupAdminRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for addUserGroupMember
     *
     * @param groupId         ユーザーグループUUID (required)
     * @param userGroupMember (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addUserGroupMemberCall(UUID groupId, UserGroupMember userGroupMember, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userGroupMember;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserGroupMemberValidateBeforeCall(UUID groupId, UserGroupMember userGroupMember, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addUserGroupMember(Async)");
        }


        okhttp3.Call localVarCall = addUserGroupMemberCall(groupId, userGroupMember, _callback);
        return localVarCall;

    }

    /**
     * グループメンバーを追加
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId         ユーザーグループUUID (required)
     * @param userGroupMember (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void addUserGroupMember(UUID groupId, UserGroupMember userGroupMember) throws ApiException {
        addUserGroupMemberWithHttpInfo(groupId, userGroupMember);
    }

    /**
     * グループメンバーを追加
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId         ユーザーグループUUID (required)
     * @param userGroupMember (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> addUserGroupMemberWithHttpInfo(UUID groupId, UserGroupMember userGroupMember) throws ApiException {
        okhttp3.Call localVarCall = addUserGroupMemberValidateBeforeCall(groupId, userGroupMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * グループメンバーを追加 (asynchronously)
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId         ユーザーグループUUID (required)
     * @param userGroupMember (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 追加されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addUserGroupMemberAsync(UUID groupId, UserGroupMember userGroupMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserGroupMemberValidateBeforeCall(groupId, userGroupMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for createUserGroup
     *
     * @param postUserGroupRequest (optional)
     * @param _callback            Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したグループを作成する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createUserGroupCall(PostUserGroupRequest postUserGroupRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postUserGroupRequest;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserGroupValidateBeforeCall(PostUserGroupRequest postUserGroupRequest, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = createUserGroupCall(postUserGroupRequest, _callback);
        return localVarCall;

    }

    /**
     * ユーザーグループを作成
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     *
     * @param postUserGroupRequest (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したグループを作成する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public UserGroup createUserGroup(PostUserGroupRequest postUserGroupRequest) throws ApiException {
        ApiResponse<UserGroup> localVarResp = createUserGroupWithHttpInfo(postUserGroupRequest);
        return localVarResp.getData();
    }

    /**
     * ユーザーグループを作成
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     *
     * @param postUserGroupRequest (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したグループを作成する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UserGroup> createUserGroupWithHttpInfo(PostUserGroupRequest postUserGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserGroupValidateBeforeCall(postUserGroupRequest, null);
        Type localVarReturnType = new TypeToken<UserGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ユーザーグループを作成 (asynchronously)
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     *
     * @param postUserGroupRequest (optional)
     * @param _callback            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定したグループを作成する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 指定した名前のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createUserGroupAsync(PostUserGroupRequest postUserGroupRequest, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserGroupValidateBeforeCall(postUserGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteUserGroup
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content ユーザーグループが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUserGroupCall(UUID groupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserGroupValidateBeforeCall(UUID groupId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteUserGroup(Async)");
        }


        okhttp3.Call localVarCall = deleteUserGroupCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * ユーザーグループを削除
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId ユーザーグループUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content ユーザーグループが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteUserGroup(UUID groupId) throws ApiException {
        deleteUserGroupWithHttpInfo(groupId);
    }

    /**
     * ユーザーグループを削除
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId ユーザーグループUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content ユーザーグループが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteUserGroupWithHttpInfo(UUID groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserGroupValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ユーザーグループを削除 (asynchronously)
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content ユーザーグループが削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUserGroupAsync(UUID groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserGroupValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editUserGroup
     *
     * @param groupId               ユーザーグループUUID (required)
     * @param patchUserGroupRequest (optional)
     * @param _callback             Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後のグループ名のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editUserGroupCall(UUID groupId, PatchUserGroupRequest patchUserGroupRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchUserGroupRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editUserGroupValidateBeforeCall(UUID groupId, PatchUserGroupRequest patchUserGroupRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling editUserGroup(Async)");
        }


        okhttp3.Call localVarCall = editUserGroupCall(groupId, patchUserGroupRequest, _callback);
        return localVarCall;

    }

    /**
     * ユーザーグループを編集
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId               ユーザーグループUUID (required)
     * @param patchUserGroupRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後のグループ名のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public void editUserGroup(UUID groupId, PatchUserGroupRequest patchUserGroupRequest) throws ApiException {
        editUserGroupWithHttpInfo(groupId, patchUserGroupRequest);
    }

    /**
     * ユーザーグループを編集
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId               ユーザーグループUUID (required)
     * @param patchUserGroupRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後のグループ名のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editUserGroupWithHttpInfo(UUID groupId, PatchUserGroupRequest patchUserGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = editUserGroupValidateBeforeCall(groupId, patchUserGroupRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ユーザーグループを編集 (asynchronously)
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId               ユーザーグループUUID (required)
     * @param patchUserGroupRequest (optional)
     * @param _callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 変更後のグループ名のグループは既に存在します。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editUserGroupAsync(UUID groupId, PatchUserGroupRequest patchUserGroupRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editUserGroupValidateBeforeCall(groupId, patchUserGroupRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editUserGroupMember
     *
     * @param groupId                 ユーザーグループUUID (required)
     * @param userId                  ユーザーUUID (required)
     * @param patchGroupMemberRequest (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しないか、リクエストが不正です。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editUserGroupMemberCall(UUID groupId, UUID userId, PatchGroupMemberRequest patchGroupMemberRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchGroupMemberRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members/{userId}"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()))
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editUserGroupMemberValidateBeforeCall(UUID groupId, UUID userId, PatchGroupMemberRequest patchGroupMemberRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling editUserGroupMember(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editUserGroupMember(Async)");
        }


        okhttp3.Call localVarCall = editUserGroupMemberCall(groupId, userId, patchGroupMemberRequest, _callback);
        return localVarCall;

    }

    /**
     * ユーザーグループメンバーを編集
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId                 ユーザーグループUUID (required)
     * @param userId                  ユーザーUUID (required)
     * @param patchGroupMemberRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しないか、リクエストが不正です。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void editUserGroupMember(UUID groupId, UUID userId, PatchGroupMemberRequest patchGroupMemberRequest) throws ApiException {
        editUserGroupMemberWithHttpInfo(groupId, userId, patchGroupMemberRequest);
    }

    /**
     * ユーザーグループメンバーを編集
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId                 ユーザーグループUUID (required)
     * @param userId                  ユーザーUUID (required)
     * @param patchGroupMemberRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しないか、リクエストが不正です。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editUserGroupMemberWithHttpInfo(UUID groupId, UUID userId, PatchGroupMemberRequest patchGroupMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = editUserGroupMemberValidateBeforeCall(groupId, userId, patchGroupMemberRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ユーザーグループメンバーを編集 (asynchronously)
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId                 ユーザーグループUUID (required)
     * @param userId                  ユーザーUUID (required)
     * @param patchGroupMemberRequest (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しないか、リクエストが不正です。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editUserGroupMemberAsync(UUID groupId, UUID userId, PatchGroupMemberRequest patchGroupMemberRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editUserGroupMemberValidateBeforeCall(groupId, userId, patchGroupMemberRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserGroup
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupCall(UUID groupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupValidateBeforeCall(UUID groupId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getUserGroup(Async)");
        }


        okhttp3.Call localVarCall = getUserGroupCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * ユーザーグループを取得
     * 指定したユーザーグループの情報を取得します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public UserGroup getUserGroup(UUID groupId) throws ApiException {
        ApiResponse<UserGroup> localVarResp = getUserGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * ユーザーグループを取得
     * 指定したユーザーグループの情報を取得します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UserGroup> getUserGroupWithHttpInfo(UUID groupId) throws ApiException {
        okhttp3.Call localVarCall = getUserGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<UserGroup>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ユーザーグループを取得 (asynchronously)
     * 指定したユーザーグループの情報を取得します。
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupAsync(UUID groupId, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserGroupAdmins
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupAdminsCall(UUID groupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/admins"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupAdminsValidateBeforeCall(UUID groupId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getUserGroupAdmins(Async)");
        }


        okhttp3.Call localVarCall = getUserGroupAdminsCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * グループ管理者を取得
     * 指定したグループの管理者のリストを取得します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @return List&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<UUID> getUserGroupAdmins(UUID groupId) throws ApiException {
        ApiResponse<List<UUID>> localVarResp = getUserGroupAdminsWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * グループ管理者を取得
     * 指定したグループの管理者のリストを取得します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @return ApiResponse&lt;List&lt;UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<UUID>> getUserGroupAdminsWithHttpInfo(UUID groupId) throws ApiException {
        okhttp3.Call localVarCall = getUserGroupAdminsValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<UUID>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * グループ管理者を取得 (asynchronously)
     * 指定したグループの管理者のリストを取得します。
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupAdminsAsync(UUID groupId, final ApiCallback<List<UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupAdminsValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<UUID>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserGroupMembers
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupMembersCall(UUID groupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupMembersValidateBeforeCall(UUID groupId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getUserGroupMembers(Async)");
        }


        okhttp3.Call localVarCall = getUserGroupMembersCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * グループメンバーを取得
     * 指定したグループのメンバーのリストを取得します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @return List&lt;UserGroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<UserGroupMember> getUserGroupMembers(UUID groupId) throws ApiException {
        ApiResponse<List<UserGroupMember>> localVarResp = getUserGroupMembersWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * グループメンバーを取得
     * 指定したグループのメンバーのリストを取得します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @return ApiResponse&lt;List&lt;UserGroupMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<UserGroupMember>> getUserGroupMembersWithHttpInfo(UUID groupId) throws ApiException {
        okhttp3.Call localVarCall = getUserGroupMembersValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<UserGroupMember>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * グループメンバーを取得 (asynchronously)
     * 指定したグループのメンバーのリストを取得します。
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupMembersAsync(UUID groupId, final ApiCallback<List<UserGroupMember>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupMembersValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<UserGroupMember>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUserGroups
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getUserGroupsCall(_callback);
        return localVarCall;

    }

    /**
     * ユーザーグループのリストを取得
     * ユーザーグループのリストを取得します。
     *
     * @return List&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public List<UserGroup> getUserGroups() throws ApiException {
        ApiResponse<List<UserGroup>> localVarResp = getUserGroupsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * ユーザーグループのリストを取得
     * ユーザーグループのリストを取得します。
     *
     * @return ApiResponse&lt;List&lt;UserGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<UserGroup>> getUserGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UserGroup>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ユーザーグループのリストを取得 (asynchronously)
     * ユーザーグループのリストを取得します。
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupsAsync(final ApiCallback<List<UserGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UserGroup>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeUserGroupAdmin
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param userId    ユーザーUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループ管理者から削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeUserGroupAdminCall(UUID groupId, UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/admins/{userId}"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()))
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserGroupAdminValidateBeforeCall(UUID groupId, UUID userId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeUserGroupAdmin(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserGroupAdmin(Async)");
        }


        okhttp3.Call localVarCall = removeUserGroupAdminCall(groupId, userId, _callback);
        return localVarCall;

    }

    /**
     * グループ管理者を削除
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @param userId  ユーザーUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループ管理者から削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void removeUserGroupAdmin(UUID groupId, UUID userId) throws ApiException {
        removeUserGroupAdminWithHttpInfo(groupId, userId);
    }

    /**
     * グループ管理者を削除
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     *
     * @param groupId ユーザーグループUUID (required)
     * @param userId  ユーザーUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループ管理者から削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> removeUserGroupAdminWithHttpInfo(UUID groupId, UUID userId) throws ApiException {
        okhttp3.Call localVarCall = removeUserGroupAdminValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * グループ管理者を削除 (asynchronously)
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param userId    ユーザーUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループ管理者から削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeUserGroupAdminAsync(UUID groupId, UUID userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserGroupAdminValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeUserGroupMember
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param userId    ユーザーUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループから削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しません。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeUserGroupMemberCall(UUID groupId, UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members/{userId}"
                .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()))
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserGroupMemberValidateBeforeCall(UUID groupId, UUID userId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeUserGroupMember(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserGroupMember(Async)");
        }


        okhttp3.Call localVarCall = removeUserGroupMemberCall(groupId, userId, _callback);
        return localVarCall;

    }

    /**
     * ユーザーグループから削除
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId ユーザーグループUUID (required)
     * @param userId  ユーザーUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループから削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しません。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void removeUserGroupMember(UUID groupId, UUID userId) throws ApiException {
        removeUserGroupMemberWithHttpInfo(groupId, userId);
    }

    /**
     * ユーザーグループから削除
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId ユーザーグループUUID (required)
     * @param userId  ユーザーUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループから削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しません。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> removeUserGroupMemberWithHttpInfo(UUID groupId, UUID userId) throws ApiException {
        okhttp3.Call localVarCall = removeUserGroupMemberValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ユーザーグループから削除 (asynchronously)
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     *
     * @param groupId   ユーザーグループUUID (required)
     * @param userId    ユーザーUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したユーザーがユーザーグループから削除されました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request ユーザーがグループに存在しません。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden ユーザーグループを操作する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーグループが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeUserGroupMemberAsync(UUID groupId, UUID userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserGroupMemberValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
