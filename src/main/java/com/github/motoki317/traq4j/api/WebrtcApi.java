/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;

import com.google.gson.reflect.TypeToken;


import com.github.motoki317.traq4j.model.PostWebRTCAuthenticateRequest;
import com.github.motoki317.traq4j.model.WebRTCAuthenticateResult;
import com.github.motoki317.traq4j.model.WebRTCUserState;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebrtcApi {
    private ApiClient localVarApiClient;

    public WebrtcApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebrtcApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getWebRTCState
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebRTCStateCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webrtc/state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebRTCStateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getWebRTCStateCall(_callback);
        return localVarCall;

    }

    /**
     * WebRTC状態を取得
     * 現在のWebRTC状態を取得します。
     * @return List&lt;WebRTCUserState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<WebRTCUserState> getWebRTCState() throws ApiException {
        ApiResponse<List<WebRTCUserState>> localVarResp = getWebRTCStateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * WebRTC状態を取得
     * 現在のWebRTC状態を取得します。
     * @return ApiResponse&lt;List&lt;WebRTCUserState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebRTCUserState>> getWebRTCStateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWebRTCStateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<WebRTCUserState>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * WebRTC状態を取得 (asynchronously)
     * 現在のWebRTC状態を取得します。
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebRTCStateAsync(final ApiCallback<List<WebRTCUserState>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebRTCStateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<WebRTCUserState>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postWebRTCAuthenticate
     * @param postWebRTCAuthenticateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable WebRTCは現在機能を停止しています </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebRTCAuthenticateCall(PostWebRTCAuthenticateRequest postWebRTCAuthenticateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postWebRTCAuthenticateRequest;

        // create path and map variables
        String localVarPath = "/webrtc/authenticate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWebRTCAuthenticateValidateBeforeCall(PostWebRTCAuthenticateRequest postWebRTCAuthenticateRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postWebRTCAuthenticateCall(postWebRTCAuthenticateRequest, _callback);
        return localVarCall;

    }

    /**
     * Skyway用認証API
     * Skyway WebRTC用の認証API
     * @param postWebRTCAuthenticateRequest  (optional)
     * @return WebRTCAuthenticateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable WebRTCは現在機能を停止しています </td><td>  -  </td></tr>
     </table>
     */
    public WebRTCAuthenticateResult postWebRTCAuthenticate(PostWebRTCAuthenticateRequest postWebRTCAuthenticateRequest) throws ApiException {
        ApiResponse<WebRTCAuthenticateResult> localVarResp = postWebRTCAuthenticateWithHttpInfo(postWebRTCAuthenticateRequest);
        return localVarResp.getData();
    }

    /**
     * Skyway用認証API
     * Skyway WebRTC用の認証API
     * @param postWebRTCAuthenticateRequest  (optional)
     * @return ApiResponse&lt;WebRTCAuthenticateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable WebRTCは現在機能を停止しています </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebRTCAuthenticateResult> postWebRTCAuthenticateWithHttpInfo(PostWebRTCAuthenticateRequest postWebRTCAuthenticateRequest) throws ApiException {
        okhttp3.Call localVarCall = postWebRTCAuthenticateValidateBeforeCall(postWebRTCAuthenticateRequest, null);
        Type localVarReturnType = new TypeToken<WebRTCAuthenticateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skyway用認証API (asynchronously)
     * Skyway WebRTC用の認証API
     * @param postWebRTCAuthenticateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable WebRTCは現在機能を停止しています </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebRTCAuthenticateAsync(PostWebRTCAuthenticateRequest postWebRTCAuthenticateRequest, final ApiCallback<WebRTCAuthenticateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWebRTCAuthenticateValidateBeforeCall(postWebRTCAuthenticateRequest, _callback);
        Type localVarReturnType = new TypeToken<WebRTCAuthenticateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
