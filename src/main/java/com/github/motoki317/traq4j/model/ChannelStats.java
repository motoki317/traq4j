/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.motoki317.traq4j.model.ChannelStatsStamp;
import com.github.motoki317.traq4j.model.ChannelStatsUser;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.github.motoki317.traq4j.JSON;

/**
 * チャンネル統計情報
 */
@ApiModel(description = "チャンネル統計情報")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T02:01:01.991892Z[Etc/UTC]")
public class ChannelStats {
  public static final String SERIALIZED_NAME_TOTAL_MESSAGE_COUNT = "totalMessageCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_MESSAGE_COUNT)
  private Long totalMessageCount;

  public static final String SERIALIZED_NAME_STAMPS = "stamps";
  @SerializedName(SERIALIZED_NAME_STAMPS)
  private List<ChannelStatsStamp> stamps = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<ChannelStatsUser> users = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  private OffsetDateTime datetime;

  public ChannelStats() { 
  }

  public ChannelStats totalMessageCount(Long totalMessageCount) {
    
    this.totalMessageCount = totalMessageCount;
    return this;
  }

   /**
   * チャンネルの総投稿メッセージ数(削除されたものも含む)
   * @return totalMessageCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "チャンネルの総投稿メッセージ数(削除されたものも含む)")

  public Long getTotalMessageCount() {
    return totalMessageCount;
  }


  public void setTotalMessageCount(Long totalMessageCount) {
    this.totalMessageCount = totalMessageCount;
  }


  public ChannelStats stamps(List<ChannelStatsStamp> stamps) {
    
    this.stamps = stamps;
    return this;
  }

  public ChannelStats addStampsItem(ChannelStatsStamp stampsItem) {
    this.stamps.add(stampsItem);
    return this;
  }

   /**
   * チャンネル上のスタンプ統計情報
   * @return stamps
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "チャンネル上のスタンプ統計情報")

  public List<ChannelStatsStamp> getStamps() {
    return stamps;
  }


  public void setStamps(List<ChannelStatsStamp> stamps) {
    this.stamps = stamps;
  }


  public ChannelStats users(List<ChannelStatsUser> users) {
    
    this.users = users;
    return this;
  }

  public ChannelStats addUsersItem(ChannelStatsUser usersItem) {
    this.users.add(usersItem);
    return this;
  }

   /**
   * チャンネル上のユーザー統計情報
   * @return users
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "チャンネル上のユーザー統計情報")

  public List<ChannelStatsUser> getUsers() {
    return users;
  }


  public void setUsers(List<ChannelStatsUser> users) {
    this.users = users;
  }


  public ChannelStats datetime(OffsetDateTime datetime) {
    
    this.datetime = datetime;
    return this;
  }

   /**
   * 統計情報日時
   * @return datetime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "統計情報日時")

  public OffsetDateTime getDatetime() {
    return datetime;
  }


  public void setDatetime(OffsetDateTime datetime) {
    this.datetime = datetime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelStats channelStats = (ChannelStats) o;
    return Objects.equals(this.totalMessageCount, channelStats.totalMessageCount) &&
        Objects.equals(this.stamps, channelStats.stamps) &&
        Objects.equals(this.users, channelStats.users) &&
        Objects.equals(this.datetime, channelStats.datetime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalMessageCount, stamps, users, datetime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelStats {\n");
    sb.append("    totalMessageCount: ").append(toIndentedString(totalMessageCount)).append("\n");
    sb.append("    stamps: ").append(toIndentedString(stamps)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalMessageCount");
    openapiFields.add("stamps");
    openapiFields.add("users");
    openapiFields.add("datetime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("totalMessageCount");
    openapiRequiredFields.add("stamps");
    openapiRequiredFields.add("users");
    openapiRequiredFields.add("datetime");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChannelStats
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ChannelStats.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelStats is not found in the empty JSON string", ChannelStats.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChannelStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelStats` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelStats.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArraystamps = jsonObj.getAsJsonArray("stamps");
      if (jsonArraystamps != null) {
        // ensure the json data is an array
        if (!jsonObj.get("stamps").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `stamps` to be an array in the JSON string but got `%s`", jsonObj.get("stamps").toString()));
        }

        // validate the optional field `stamps` (array)
        for (int i = 0; i < jsonArraystamps.size(); i++) {
          ChannelStatsStamp.validateJsonObject(jsonArraystamps.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
      if (jsonArrayusers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("users").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
        }

        // validate the optional field `users` (array)
        for (int i = 0; i < jsonArrayusers.size(); i++) {
          ChannelStatsUser.validateJsonObject(jsonArrayusers.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelStats.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelStats>() {
           @Override
           public void write(JsonWriter out, ChannelStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelStats read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChannelStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChannelStats
  * @throws IOException if the JSON string is invalid with respect to ChannelStats
  */
  public static ChannelStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelStats.class);
  }

 /**
  * Convert an instance of ChannelStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

