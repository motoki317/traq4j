/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.github.motoki317.traq4j.JSON;

/**
 * メッセージクリップ
 */
@ApiModel(description = "メッセージクリップ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T02:01:01.991892Z[Etc/UTC]")
public class MessageClip {
  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private UUID folderId;

  public static final String SERIALIZED_NAME_CLIPPED_AT = "clippedAt";
  @SerializedName(SERIALIZED_NAME_CLIPPED_AT)
  private OffsetDateTime clippedAt;

  public MessageClip() { 
  }

  public MessageClip folderId(UUID folderId) {
    
    this.folderId = folderId;
    return this;
  }

   /**
   * クリップされているフォルダのID
   * @return folderId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "クリップされているフォルダのID")

  public UUID getFolderId() {
    return folderId;
  }


  public void setFolderId(UUID folderId) {
    this.folderId = folderId;
  }


  public MessageClip clippedAt(OffsetDateTime clippedAt) {
    
    this.clippedAt = clippedAt;
    return this;
  }

   /**
   * クリップされた日時
   * @return clippedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "クリップされた日時")

  public OffsetDateTime getClippedAt() {
    return clippedAt;
  }


  public void setClippedAt(OffsetDateTime clippedAt) {
    this.clippedAt = clippedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageClip messageClip = (MessageClip) o;
    return Objects.equals(this.folderId, messageClip.folderId) &&
        Objects.equals(this.clippedAt, messageClip.clippedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(folderId, clippedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageClip {\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    clippedAt: ").append(toIndentedString(clippedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("folderId");
    openapiFields.add("clippedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("folderId");
    openapiRequiredFields.add("clippedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MessageClip
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MessageClip.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageClip is not found in the empty JSON string", MessageClip.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MessageClip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageClip` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageClip.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("folderId") != null && !jsonObj.get("folderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageClip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageClip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageClip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageClip.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageClip>() {
           @Override
           public void write(JsonWriter out, MessageClip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageClip read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessageClip given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessageClip
  * @throws IOException if the JSON string is invalid with respect to MessageClip
  */
  public static MessageClip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageClip.class);
  }

 /**
  * Convert an instance of MessageClip to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

