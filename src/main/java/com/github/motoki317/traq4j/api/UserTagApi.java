/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;

import com.google.gson.reflect.TypeToken;


import com.github.motoki317.traq4j.model.PatchUserTagRequest;
import com.github.motoki317.traq4j.model.PostUserTagRequest;
import com.github.motoki317.traq4j.model.Tag;
import java.util.UUID;
import com.github.motoki317.traq4j.model.UserTag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserTagApi {
    private ApiClient localVarApiClient;

    public UserTagApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserTagApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addMyUserTag
     * @param postUserTagRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMyUserTagCall(PostUserTagRequest postUserTagRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postUserTagRequest;

        // create path and map variables
        String localVarPath = "/users/me/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMyUserTagValidateBeforeCall(PostUserTagRequest postUserTagRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addMyUserTagCall(postUserTagRequest, _callback);
        return localVarCall;

    }

    /**
     * 自分にタグを追加
     * 自分に新しくタグを追加します。
     * @param postUserTagRequest  (optional)
     * @return UserTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public UserTag addMyUserTag(PostUserTagRequest postUserTagRequest) throws ApiException {
        ApiResponse<UserTag> localVarResp = addMyUserTagWithHttpInfo(postUserTagRequest);
        return localVarResp.getData();
    }

    /**
     * 自分にタグを追加
     * 自分に新しくタグを追加します。
     * @param postUserTagRequest  (optional)
     * @return ApiResponse&lt;UserTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserTag> addMyUserTagWithHttpInfo(PostUserTagRequest postUserTagRequest) throws ApiException {
        okhttp3.Call localVarCall = addMyUserTagValidateBeforeCall(postUserTagRequest, null);
        Type localVarReturnType = new TypeToken<UserTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 自分にタグを追加 (asynchronously)
     * 自分に新しくタグを追加します。
     * @param postUserTagRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMyUserTagAsync(PostUserTagRequest postUserTagRequest, final ApiCallback<UserTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMyUserTagValidateBeforeCall(postUserTagRequest, _callback);
        Type localVarReturnType = new TypeToken<UserTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUserTag
     * @param userId ユーザーUUID (required)
     * @param postUserTagRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserTagCall(UUID userId, PostUserTagRequest postUserTagRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postUserTagRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/tags"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserTagValidateBeforeCall(UUID userId, PostUserTagRequest postUserTagRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addUserTag(Async)");
        }
        

        okhttp3.Call localVarCall = addUserTagCall(userId, postUserTagRequest, _callback);
        return localVarCall;

    }

    /**
     * ユーザーにタグを追加
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @param userId ユーザーUUID (required)
     * @param postUserTagRequest  (optional)
     * @return UserTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public UserTag addUserTag(UUID userId, PostUserTagRequest postUserTagRequest) throws ApiException {
        ApiResponse<UserTag> localVarResp = addUserTagWithHttpInfo(userId, postUserTagRequest);
        return localVarResp.getData();
    }

    /**
     * ユーザーにタグを追加
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @param userId ユーザーUUID (required)
     * @param postUserTagRequest  (optional)
     * @return ApiResponse&lt;UserTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserTag> addUserTagWithHttpInfo(UUID userId, PostUserTagRequest postUserTagRequest) throws ApiException {
        okhttp3.Call localVarCall = addUserTagValidateBeforeCall(userId, postUserTagRequest, null);
        Type localVarReturnType = new TypeToken<UserTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ユーザーにタグを追加 (asynchronously)
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @param userId ユーザーUUID (required)
     * @param postUserTagRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserTagAsync(UUID userId, PostUserTagRequest postUserTagRequest, final ApiCallback<UserTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserTagValidateBeforeCall(userId, postUserTagRequest, _callback);
        Type localVarReturnType = new TypeToken<UserTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editMyUserTag
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editMyUserTagCall(UUID tagId, PatchUserTagRequest patchUserTagRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchUserTagRequest;

        // create path and map variables
        String localVarPath = "/users/me/tags/{tagId}"
            .replaceAll("\\{" + "tagId" + "\\}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMyUserTagValidateBeforeCall(UUID tagId, PatchUserTagRequest patchUserTagRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling editMyUserTag(Async)");
        }
        

        okhttp3.Call localVarCall = editMyUserTagCall(tagId, patchUserTagRequest, _callback);
        return localVarCall;

    }

    /**
     * 自分のタグを編集
     * 自分の指定したタグの状態を変更します。
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void editMyUserTag(UUID tagId, PatchUserTagRequest patchUserTagRequest) throws ApiException {
        editMyUserTagWithHttpInfo(tagId, patchUserTagRequest);
    }

    /**
     * 自分のタグを編集
     * 自分の指定したタグの状態を変更します。
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editMyUserTagWithHttpInfo(UUID tagId, PatchUserTagRequest patchUserTagRequest) throws ApiException {
        okhttp3.Call localVarCall = editMyUserTagValidateBeforeCall(tagId, patchUserTagRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 自分のタグを編集 (asynchronously)
     * 自分の指定したタグの状態を変更します。
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editMyUserTagAsync(UUID tagId, PatchUserTagRequest patchUserTagRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMyUserTagValidateBeforeCall(tagId, patchUserTagRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editUserTag
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーか、タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserTagCall(UUID userId, UUID tagId, PatchUserTagRequest patchUserTagRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchUserTagRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/tags/{tagId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "tagId" + "\\}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editUserTagValidateBeforeCall(UUID userId, UUID tagId, PatchUserTagRequest patchUserTagRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editUserTag(Async)");
        }
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling editUserTag(Async)");
        }
        

        okhttp3.Call localVarCall = editUserTagCall(userId, tagId, patchUserTagRequest, _callback);
        return localVarCall;

    }

    /**
     * ユーザーのタグを編集
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーか、タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void editUserTag(UUID userId, UUID tagId, PatchUserTagRequest patchUserTagRequest) throws ApiException {
        editUserTagWithHttpInfo(userId, tagId, patchUserTagRequest);
    }

    /**
     * ユーザーのタグを編集
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーか、タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editUserTagWithHttpInfo(UUID userId, UUID tagId, PatchUserTagRequest patchUserTagRequest) throws ApiException {
        okhttp3.Call localVarCall = editUserTagValidateBeforeCall(userId, tagId, patchUserTagRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ユーザーのタグを編集 (asynchronously)
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @param patchUserTagRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーか、タグが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserTagAsync(UUID userId, UUID tagId, PatchUserTagRequest patchUserTagRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editUserTagValidateBeforeCall(userId, tagId, patchUserTagRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyUserTags
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyUserTagsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyUserTagsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMyUserTagsCall(_callback);
        return localVarCall;

    }

    /**
     * 自分のタグリストを取得
     * 自分に付けられているタグの配列を取得します。
     * @return List&lt;UserTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserTag> getMyUserTags() throws ApiException {
        ApiResponse<List<UserTag>> localVarResp = getMyUserTagsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 自分のタグリストを取得
     * 自分に付けられているタグの配列を取得します。
     * @return ApiResponse&lt;List&lt;UserTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserTag>> getMyUserTagsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMyUserTagsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UserTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 自分のタグリストを取得 (asynchronously)
     * 自分に付けられているタグの配列を取得します。
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyUserTagsAsync(final ApiCallback<List<UserTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyUserTagsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UserTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTag
     * @param tagId タグUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagCall(UUID tagId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tagId}"
            .replaceAll("\\{" + "tagId" + "\\}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagValidateBeforeCall(UUID tagId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling getTag(Async)");
        }
        

        okhttp3.Call localVarCall = getTagCall(tagId, _callback);
        return localVarCall;

    }

    /**
     * タグ情報を取得
     * 指定したタグの情報を取得します。
     * @param tagId タグUUID (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Tag getTag(UUID tagId) throws ApiException {
        ApiResponse<Tag> localVarResp = getTagWithHttpInfo(tagId);
        return localVarResp.getData();
    }

    /**
     * タグ情報を取得
     * 指定したタグの情報を取得します。
     * @param tagId タグUUID (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> getTagWithHttpInfo(UUID tagId) throws ApiException {
        okhttp3.Call localVarCall = getTagValidateBeforeCall(tagId, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * タグ情報を取得 (asynchronously)
     * 指定したタグの情報を取得します。
     * @param tagId タグUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagAsync(UUID tagId, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagValidateBeforeCall(tagId, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserTags
     * @param userId ユーザーUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserTagsCall(UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/tags"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserTagsValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserTags(Async)");
        }
        

        okhttp3.Call localVarCall = getUserTagsCall(userId, _callback);
        return localVarCall;

    }

    /**
     * ユーザーのタグリストを取得
     * 指定したユーザーのタグリストを取得します。
     * @param userId ユーザーUUID (required)
     * @return List&lt;UserTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public List<UserTag> getUserTags(UUID userId) throws ApiException {
        ApiResponse<List<UserTag>> localVarResp = getUserTagsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * ユーザーのタグリストを取得
     * 指定したユーザーのタグリストを取得します。
     * @param userId ユーザーUUID (required)
     * @return ApiResponse&lt;List&lt;UserTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserTag>> getUserTagsWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getUserTagsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<UserTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ユーザーのタグリストを取得 (asynchronously)
     * 指定したユーザーのタグリストを取得します。
     * @param userId ユーザーUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserTagsAsync(UUID userId, final ApiCallback<List<UserTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserTagsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<UserTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeMyUserTag
     * @param tagId タグUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeMyUserTagCall(UUID tagId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/tags/{tagId}"
            .replaceAll("\\{" + "tagId" + "\\}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMyUserTagValidateBeforeCall(UUID tagId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling removeMyUserTag(Async)");
        }
        

        okhttp3.Call localVarCall = removeMyUserTagCall(tagId, _callback);
        return localVarCall;

    }

    /**
     * 自分からタグを削除します
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @param tagId タグUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
     </table>
     */
    public void removeMyUserTag(UUID tagId) throws ApiException {
        removeMyUserTagWithHttpInfo(tagId);
    }

    /**
     * 自分からタグを削除します
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @param tagId タグUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeMyUserTagWithHttpInfo(UUID tagId) throws ApiException {
        okhttp3.Call localVarCall = removeMyUserTagValidateBeforeCall(tagId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 自分からタグを削除します (asynchronously)
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @param tagId タグUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden タグがロックされています。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeMyUserTagAsync(UUID tagId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMyUserTagValidateBeforeCall(tagId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeUserTag
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserTagCall(UUID userId, UUID tagId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/tags/{tagId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "tagId" + "\\}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserTagValidateBeforeCall(UUID userId, UUID tagId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserTag(Async)");
        }
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling removeUserTag(Async)");
        }
        

        okhttp3.Call localVarCall = removeUserTagCall(userId, tagId, _callback);
        return localVarCall;

    }

    /**
     * ユーザーからタグを削除します
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void removeUserTag(UUID userId, UUID tagId) throws ApiException {
        removeUserTagWithHttpInfo(userId, tagId);
    }

    /**
     * ユーザーからタグを削除します
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeUserTagWithHttpInfo(UUID userId, UUID tagId) throws ApiException {
        okhttp3.Call localVarCall = removeUserTagValidateBeforeCall(userId, tagId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ユーザーからタグを削除します (asynchronously)
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @param userId ユーザーUUID (required)
     * @param tagId タグUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除されました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserTagAsync(UUID userId, UUID tagId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserTagValidateBeforeCall(userId, tagId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
