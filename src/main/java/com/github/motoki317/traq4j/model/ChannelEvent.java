/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

import org.threeten.bp.OffsetDateTime;

/**
 * チャンネルイベント
 */
@ApiModel(description = "チャンネルイベント")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-18T11:58:46.174904Z[Etc/UTC]")
public class ChannelEvent {
    /**
     * イベントタイプ
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        TOPICCHANGED("TopicChanged"),

        SUBSCRIBERSCHANGED("SubscribersChanged"),

        PINADDED("PinAdded"),

        PINREMOVED("PinRemoved"),

        NAMECHANGED("NameChanged"),

        PARENTCHANGED("ParentChanged"),

        VISIBILITYCHANGED("VisibilityChanged"),

        FORCEDNOTIFICATIONCHANGED("ForcedNotificationChanged"),

        CHILDCREATED("ChildCreated");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;

    public static final String SERIALIZED_NAME_DATETIME = "datetime";
    @SerializedName(SERIALIZED_NAME_DATETIME)
    private OffsetDateTime datetime;

    public static final String SERIALIZED_NAME_DETAIL = "detail";
    @SerializedName(SERIALIZED_NAME_DETAIL)
    private Object detail;


    public ChannelEvent type(TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * イベントタイプ
     *
     * @return type
     **/
    @ApiModelProperty(required = true, value = "イベントタイプ")

    public TypeEnum getType() {
        return type;
    }


    public void setType(TypeEnum type) {
        this.type = type;
    }


    public ChannelEvent datetime(OffsetDateTime datetime) {

        this.datetime = datetime;
        return this;
    }

    /**
     * イベント日時
     *
     * @return datetime
     **/
    @ApiModelProperty(required = true, value = "イベント日時")

    public OffsetDateTime getDatetime() {
        return datetime;
    }


    public void setDatetime(OffsetDateTime datetime) {
        this.datetime = datetime;
    }


    public ChannelEvent detail(Object detail) {

        this.detail = detail;
        return this;
    }

    /**
     * イベント内容
     *
     * @return detail
     **/
    @ApiModelProperty(required = true, value = "イベント内容")

    public Object getDetail() {
        return detail;
    }


    public void setDetail(Object detail) {
        this.detail = detail;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChannelEvent channelEvent = (ChannelEvent) o;
        return Objects.equals(this.type, channelEvent.type) &&
                Objects.equals(this.datetime, channelEvent.datetime) &&
                Objects.equals(this.detail, channelEvent.detail);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, datetime, detail);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChannelEvent {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
        sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

