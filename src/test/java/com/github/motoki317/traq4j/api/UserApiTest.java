/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.model.DMChannel;
import java.io.File;
import com.github.motoki317.traq4j.model.Message;
import org.threeten.bp.OffsetDateTime;
import com.github.motoki317.traq4j.model.PatchUserRequest;
import com.github.motoki317.traq4j.model.PatchUserTagRequest;
import com.github.motoki317.traq4j.model.PostMessageRequest;
import com.github.motoki317.traq4j.model.PostUserRequest;
import com.github.motoki317.traq4j.model.PostUserTagRequest;
import com.github.motoki317.traq4j.model.PutUserPasswordRequest;
import java.util.UUID;
import com.github.motoki317.traq4j.model.User;
import com.github.motoki317.traq4j.model.UserDetail;
import com.github.motoki317.traq4j.model.UserTag;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * ユーザーにタグを追加
     *
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTagTest() throws ApiException {
        UUID userId = null;
        PostUserTagRequest postUserTagRequest = null;
        UserTag response = api.addUserTag(userId, postUserTagRequest);

        // TODO: test validations
    }
    
    /**
     * ユーザーのアイコン画像を変更します
     *
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeUserIconTest() throws ApiException {
        UUID userId = null;
        File file = null;
        api.changeUserIcon(userId, file);

        // TODO: test validations
    }
    
    /**
     * ユーザーのパスワードを変更
     *
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeUserPasswordTest() throws ApiException {
        UUID userId = null;
        PutUserPasswordRequest putUserPasswordRequest = null;
        api.changeUserPassword(userId, putUserPasswordRequest);

        // TODO: test validations
    }
    
    /**
     * ユーザーを登録
     *
     * ユーザーを登録します。 管理者権限が必要です。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        PostUserRequest postUserRequest = null;
        UserDetail response = api.createUser(postUserRequest);

        // TODO: test validations
    }
    
    /**
     * ユーザー情報を変更
     *
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editUserTest() throws ApiException {
        UUID userId = null;
        PatchUserRequest patchUserRequest = null;
        api.editUser(userId, patchUserRequest);

        // TODO: test validations
    }
    
    /**
     * ユーザーのタグを編集
     *
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editUserTagTest() throws ApiException {
        UUID userId = null;
        UUID tagId = null;
        PatchUserTagRequest patchUserTagRequest = null;
        api.editUserTag(userId, tagId, patchUserTagRequest);

        // TODO: test validations
    }
    
    /**
     * ダイレクトメッセージのリストを取得
     *
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDirectMessagesTest() throws ApiException {
        UUID userId = null;
        Integer limit = null;
        Integer offset = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        Boolean inclusive = null;
        String order = null;
        List<Message> response = api.getDirectMessages(userId, limit, offset, since, until, inclusive, order);

        // TODO: test validations
    }
    
    /**
     * ユーザー詳細情報を取得
     *
     * 指定したユーザーの詳細情報を取得します。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        UUID userId = null;
        UserDetail response = api.getUser(userId);

        // TODO: test validations
    }
    
    /**
     * DMチャンネル情報を取得
     *
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserDMChannelTest() throws ApiException {
        String userId = null;
        DMChannel response = api.getUserDMChannel(userId);

        // TODO: test validations
    }
    
    /**
     * ユーザーのアイコン画像を取得
     *
     * 指定したユーザーのアイコン画像を取得します。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserIconTest() throws ApiException {
        UUID userId = null;
        File response = api.getUserIcon(userId);

        // TODO: test validations
    }
    
    /**
     * ユーザーのタグリストを取得
     *
     * 指定したユーザーのタグリストを取得します。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTagsTest() throws ApiException {
        UUID userId = null;
        List<UserTag> response = api.getUserTags(userId);

        // TODO: test validations
    }
    
    /**
     * ユーザーのリストを取得
     *
     * ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスに非アクティブユーザーは含まれません。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Boolean includeSuspended = null;
        List<User> response = api.getUsers(includeSuspended);

        // TODO: test validations
    }
    
    /**
     * ダイレクトメッセージを送信
     *
     * 指定したユーザーにダイレクトメッセージを送信します。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDirectMessageTest() throws ApiException {
        UUID userId = null;
        PostMessageRequest postMessageRequest = null;
        Message response = api.postDirectMessage(userId, postMessageRequest);

        // TODO: test validations
    }
    
    /**
     * ユーザーからタグを削除します
     *
     * 既に存在しないタグを削除しようとした場合は204を返します。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserTagTest() throws ApiException {
        UUID userId = null;
        UUID tagId = null;
        api.removeUserTag(userId, tagId);

        // TODO: test validations
    }
    
}
