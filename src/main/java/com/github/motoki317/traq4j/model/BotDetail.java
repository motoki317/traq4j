/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;

import com.github.motoki317.traq4j.model.BotState;
import com.github.motoki317.traq4j.model.BotTokens;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.threeten.bp.OffsetDateTime;

/**
 * BOT詳細情報
 */
@ApiModel(description = "BOT詳細情報")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-18T11:58:46.174904Z[Etc/UTC]")
public class BotDetail {
    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    private UUID id;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private OffsetDateTime updatedAt;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private OffsetDateTime createdAt;

    public static final String SERIALIZED_NAME_STATE = "state";
    @SerializedName(SERIALIZED_NAME_STATE)
    private BotState state;

    public static final String SERIALIZED_NAME_SUBSCRIBE_EVENTS = "subscribeEvents";
    @SerializedName(SERIALIZED_NAME_SUBSCRIBE_EVENTS)
    private List<String> subscribeEvents = new ArrayList<>();

    public static final String SERIALIZED_NAME_DEVELOPER_ID = "developerId";
    @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
    private UUID developerId;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_BOT_USER_ID = "botUserId";
    @SerializedName(SERIALIZED_NAME_BOT_USER_ID)
    private UUID botUserId;

    public static final String SERIALIZED_NAME_TOKENS = "tokens";
    @SerializedName(SERIALIZED_NAME_TOKENS)
    private BotTokens tokens;

    public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
    @SerializedName(SERIALIZED_NAME_ENDPOINT)
    private URI endpoint;

    public static final String SERIALIZED_NAME_PRIVILEGED = "privileged";
    @SerializedName(SERIALIZED_NAME_PRIVILEGED)
    private Boolean privileged;

    public static final String SERIALIZED_NAME_CHANNELS = "channels";
    @SerializedName(SERIALIZED_NAME_CHANNELS)
    private List<UUID> channels = new ArrayList<>();


    public BotDetail id(UUID id) {

        this.id = id;
        return this;
    }

    /**
     * BOT UUID
     *
     * @return id
     **/
    @ApiModelProperty(required = true, value = "BOT UUID")

    public UUID getId() {
        return id;
    }


    public void setId(UUID id) {
        this.id = id;
    }


    public BotDetail updatedAt(OffsetDateTime updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * 更新日時
     *
     * @return updatedAt
     **/
    @ApiModelProperty(required = true, value = "更新日時")

    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }


    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }


    public BotDetail createdAt(OffsetDateTime createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * 作成日時
     *
     * @return createdAt
     **/
    @ApiModelProperty(required = true, value = "作成日時")

    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }


    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    public BotDetail state(BotState state) {

        this.state = state;
        return this;
    }

    /**
     * Get state
     *
     * @return state
     **/
    @ApiModelProperty(required = true, value = "")

    public BotState getState() {
        return state;
    }


    public void setState(BotState state) {
        this.state = state;
    }


    public BotDetail subscribeEvents(List<String> subscribeEvents) {

        this.subscribeEvents = subscribeEvents;
        return this;
    }

    public BotDetail addSubscribeEventsItem(String subscribeEventsItem) {
        this.subscribeEvents.add(subscribeEventsItem);
        return this;
    }

    /**
     * BOTが購読しているイベントの配列
     *
     * @return subscribeEvents
     **/
    @ApiModelProperty(required = true, value = "BOTが購読しているイベントの配列")

    public List<String> getSubscribeEvents() {
        return subscribeEvents;
    }


    public void setSubscribeEvents(List<String> subscribeEvents) {
        this.subscribeEvents = subscribeEvents;
    }


    public BotDetail developerId(UUID developerId) {

        this.developerId = developerId;
        return this;
    }

    /**
     * BOT開発者UUID
     *
     * @return developerId
     **/
    @ApiModelProperty(required = true, value = "BOT開発者UUID")

    public UUID getDeveloperId() {
        return developerId;
    }


    public void setDeveloperId(UUID developerId) {
        this.developerId = developerId;
    }


    public BotDetail description(String description) {

        this.description = description;
        return this;
    }

    /**
     * 説明
     *
     * @return description
     **/
    @ApiModelProperty(required = true, value = "説明")

    public String getDescription() {
        return description;
    }


    public void setDescription(String description) {
        this.description = description;
    }


    public BotDetail botUserId(UUID botUserId) {

        this.botUserId = botUserId;
        return this;
    }

    /**
     * BOTユーザーUUID
     *
     * @return botUserId
     **/
    @ApiModelProperty(required = true, value = "BOTユーザーUUID")

    public UUID getBotUserId() {
        return botUserId;
    }


    public void setBotUserId(UUID botUserId) {
        this.botUserId = botUserId;
    }


    public BotDetail tokens(BotTokens tokens) {

        this.tokens = tokens;
        return this;
    }

    /**
     * Get tokens
     *
     * @return tokens
     **/
    @ApiModelProperty(required = true, value = "")

    public BotTokens getTokens() {
        return tokens;
    }


    public void setTokens(BotTokens tokens) {
        this.tokens = tokens;
    }


    public BotDetail endpoint(URI endpoint) {

        this.endpoint = endpoint;
        return this;
    }

    /**
     * BOTサーバーエンドポイント
     *
     * @return endpoint
     **/
    @ApiModelProperty(required = true, value = "BOTサーバーエンドポイント")

    public URI getEndpoint() {
        return endpoint;
    }


    public void setEndpoint(URI endpoint) {
        this.endpoint = endpoint;
    }


    public BotDetail privileged(Boolean privileged) {

        this.privileged = privileged;
        return this;
    }

    /**
     * 特権BOTかどうか
     *
     * @return privileged
     **/
    @ApiModelProperty(required = true, value = "特権BOTかどうか")

    public Boolean getPrivileged() {
        return privileged;
    }


    public void setPrivileged(Boolean privileged) {
        this.privileged = privileged;
    }


    public BotDetail channels(List<UUID> channels) {

        this.channels = channels;
        return this;
    }

    public BotDetail addChannelsItem(UUID channelsItem) {
        this.channels.add(channelsItem);
        return this;
    }

    /**
     * BOTが参加しているチャンネルのUUID配列
     *
     * @return channels
     **/
    @ApiModelProperty(required = true, value = "BOTが参加しているチャンネルのUUID配列")

    public List<UUID> getChannels() {
        return channels;
    }


    public void setChannels(List<UUID> channels) {
        this.channels = channels;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BotDetail botDetail = (BotDetail) o;
        return Objects.equals(this.id, botDetail.id) &&
                Objects.equals(this.updatedAt, botDetail.updatedAt) &&
                Objects.equals(this.createdAt, botDetail.createdAt) &&
                Objects.equals(this.state, botDetail.state) &&
                Objects.equals(this.subscribeEvents, botDetail.subscribeEvents) &&
                Objects.equals(this.developerId, botDetail.developerId) &&
                Objects.equals(this.description, botDetail.description) &&
                Objects.equals(this.botUserId, botDetail.botUserId) &&
                Objects.equals(this.tokens, botDetail.tokens) &&
                Objects.equals(this.endpoint, botDetail.endpoint) &&
                Objects.equals(this.privileged, botDetail.privileged) &&
                Objects.equals(this.channels, botDetail.channels);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, updatedAt, createdAt, state, subscribeEvents, developerId, description, botUserId, tokens, endpoint, privileged, channels);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BotDetail {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    subscribeEvents: ").append(toIndentedString(subscribeEvents)).append("\n");
        sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    botUserId: ").append(toIndentedString(botUserId)).append("\n");
        sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
        sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
        sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
        sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

