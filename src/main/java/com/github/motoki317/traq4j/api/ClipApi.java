/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;
import com.github.motoki317.traq4j.ProgressRequestBody;
import com.github.motoki317.traq4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.motoki317.traq4j.model.ClipFolder;
import com.github.motoki317.traq4j.model.ClippedMessage;
import com.github.motoki317.traq4j.model.MessageClip;
import com.github.motoki317.traq4j.model.PatchClipFolderRequest;
import com.github.motoki317.traq4j.model.PostClipFolderMessageRequest;
import com.github.motoki317.traq4j.model.PostClipFolderRequest;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClipApi {
    private ApiClient localVarApiClient;

    public ClipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClipApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clipMessage
     *
     * @param folderId                     クリップフォルダUUID (required)
     * @param postClipFolderMessageRequest (optional)
     * @param _callback                    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call clipMessageCall(UUID folderId, PostClipFolderMessageRequest postClipFolderMessageRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postClipFolderMessageRequest;

        // create path and map variables
        String localVarPath = "/clip-folders/{folderId}/messages"
                .replaceAll("\\{" + "folderId" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clipMessageValidateBeforeCall(UUID folderId, PostClipFolderMessageRequest postClipFolderMessageRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling clipMessage(Async)");
        }


        okhttp3.Call localVarCall = clipMessageCall(folderId, postClipFolderMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * メッセージをクリップフォルダに追加
     * 指定したメッセージを指定したクリップフォルダに追加します。
     *
     * @param folderId                     クリップフォルダUUID (required)
     * @param postClipFolderMessageRequest (optional)
     * @return ClippedMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     * </table>
     */
    public ClippedMessage clipMessage(UUID folderId, PostClipFolderMessageRequest postClipFolderMessageRequest) throws ApiException {
        ApiResponse<ClippedMessage> localVarResp = clipMessageWithHttpInfo(folderId, postClipFolderMessageRequest);
        return localVarResp.getData();
    }

    /**
     * メッセージをクリップフォルダに追加
     * 指定したメッセージを指定したクリップフォルダに追加します。
     *
     * @param folderId                     クリップフォルダUUID (required)
     * @param postClipFolderMessageRequest (optional)
     * @return ApiResponse&lt;ClippedMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClippedMessage> clipMessageWithHttpInfo(UUID folderId, PostClipFolderMessageRequest postClipFolderMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = clipMessageValidateBeforeCall(folderId, postClipFolderMessageRequest, null);
        Type localVarReturnType = new TypeToken<ClippedMessage>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * メッセージをクリップフォルダに追加 (asynchronously)
     * 指定したメッセージを指定したクリップフォルダに追加します。
     *
     * @param folderId                     クリップフォルダUUID (required)
     * @param postClipFolderMessageRequest (optional)
     * @param _callback                    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Conflict 既に追加されています。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call clipMessageAsync(UUID folderId, PostClipFolderMessageRequest postClipFolderMessageRequest, final ApiCallback<ClippedMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = clipMessageValidateBeforeCall(folderId, postClipFolderMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<ClippedMessage>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createClipFolder
     *
     * @param postClipFolderRequest (optional)
     * @param _callback             Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createClipFolderCall(PostClipFolderRequest postClipFolderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postClipFolderRequest;

        // create path and map variables
        String localVarPath = "/clip-folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClipFolderValidateBeforeCall(PostClipFolderRequest postClipFolderRequest, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = createClipFolderCall(postClipFolderRequest, _callback);
        return localVarCall;

    }

    /**
     * クリップフォルダを作成
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     *
     * @param postClipFolderRequest (optional)
     * @return ClipFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public ClipFolder createClipFolder(PostClipFolderRequest postClipFolderRequest) throws ApiException {
        ApiResponse<ClipFolder> localVarResp = createClipFolderWithHttpInfo(postClipFolderRequest);
        return localVarResp.getData();
    }

    /**
     * クリップフォルダを作成
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     *
     * @param postClipFolderRequest (optional)
     * @return ApiResponse&lt;ClipFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClipFolder> createClipFolderWithHttpInfo(PostClipFolderRequest postClipFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = createClipFolderValidateBeforeCall(postClipFolderRequest, null);
        Type localVarReturnType = new TypeToken<ClipFolder>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * クリップフォルダを作成 (asynchronously)
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     *
     * @param postClipFolderRequest (optional)
     * @param _callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createClipFolderAsync(PostClipFolderRequest postClipFolderRequest, final ApiCallback<ClipFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClipFolderValidateBeforeCall(postClipFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<ClipFolder>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteClipFolder
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteClipFolderCall(UUID folderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clip-folders/{folderId}"
                .replaceAll("\\{" + "folderId" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClipFolderValidateBeforeCall(UUID folderId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteClipFolder(Async)");
        }


        okhttp3.Call localVarCall = deleteClipFolderCall(folderId, _callback);
        return localVarCall;

    }

    /**
     * クリップフォルダを削除
     * 指定したクリップフォルダを削除します。
     *
     * @param folderId クリップフォルダUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteClipFolder(UUID folderId) throws ApiException {
        deleteClipFolderWithHttpInfo(folderId);
    }

    /**
     * クリップフォルダを削除
     * 指定したクリップフォルダを削除します。
     *
     * @param folderId クリップフォルダUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteClipFolderWithHttpInfo(UUID folderId) throws ApiException {
        okhttp3.Call localVarCall = deleteClipFolderValidateBeforeCall(folderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * クリップフォルダを削除 (asynchronously)
     * 指定したクリップフォルダを削除します。
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteClipFolderAsync(UUID folderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClipFolderValidateBeforeCall(folderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editClipFolder
     *
     * @param folderId               クリップフォルダUUID (required)
     * @param patchClipFolderRequest (optional)
     * @param _callback              Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editClipFolderCall(UUID folderId, PatchClipFolderRequest patchClipFolderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchClipFolderRequest;

        // create path and map variables
        String localVarPath = "/clip-folders/{folderId}"
                .replaceAll("\\{" + "folderId" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editClipFolderValidateBeforeCall(UUID folderId, PatchClipFolderRequest patchClipFolderRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling editClipFolder(Async)");
        }


        okhttp3.Call localVarCall = editClipFolderCall(folderId, patchClipFolderRequest, _callback);
        return localVarCall;

    }

    /**
     * クリップフォルダ情報を編集
     * 指定したクリップフォルダの情報を編集します。
     *
     * @param folderId               クリップフォルダUUID (required)
     * @param patchClipFolderRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public void editClipFolder(UUID folderId, PatchClipFolderRequest patchClipFolderRequest) throws ApiException {
        editClipFolderWithHttpInfo(folderId, patchClipFolderRequest);
    }

    /**
     * クリップフォルダ情報を編集
     * 指定したクリップフォルダの情報を編集します。
     *
     * @param folderId               クリップフォルダUUID (required)
     * @param patchClipFolderRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> editClipFolderWithHttpInfo(UUID folderId, PatchClipFolderRequest patchClipFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = editClipFolderValidateBeforeCall(folderId, patchClipFolderRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * クリップフォルダ情報を編集 (asynchronously)
     * 指定したクリップフォルダの情報を編集します。
     *
     * @param folderId               クリップフォルダUUID (required)
     * @param patchClipFolderRequest (optional)
     * @param _callback              The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 編集しました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editClipFolderAsync(UUID folderId, PatchClipFolderRequest patchClipFolderRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editClipFolderValidateBeforeCall(folderId, patchClipFolderRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getClipFolder
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getClipFolderCall(UUID folderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clip-folders/{folderId}"
                .replaceAll("\\{" + "folderId" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClipFolderValidateBeforeCall(UUID folderId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getClipFolder(Async)");
        }


        okhttp3.Call localVarCall = getClipFolderCall(folderId, _callback);
        return localVarCall;

    }

    /**
     * クリップフォルダ情報を取得
     * 指定したクリップフォルダの情報を取得します。
     *
     * @param folderId クリップフォルダUUID (required)
     * @return ClipFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ClipFolder getClipFolder(UUID folderId) throws ApiException {
        ApiResponse<ClipFolder> localVarResp = getClipFolderWithHttpInfo(folderId);
        return localVarResp.getData();
    }

    /**
     * クリップフォルダ情報を取得
     * 指定したクリップフォルダの情報を取得します。
     *
     * @param folderId クリップフォルダUUID (required)
     * @return ApiResponse&lt;ClipFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ClipFolder> getClipFolderWithHttpInfo(UUID folderId) throws ApiException {
        okhttp3.Call localVarCall = getClipFolderValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<ClipFolder>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * クリップフォルダ情報を取得 (asynchronously)
     * 指定したクリップフォルダの情報を取得します。
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getClipFolderAsync(UUID folderId, final ApiCallback<ClipFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClipFolderValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<ClipFolder>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getClipFolders
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getClipFoldersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clip-folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClipFoldersValidateBeforeCall(final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getClipFoldersCall(_callback);
        return localVarCall;

    }

    /**
     * クリップフォルダのリストを取得
     * 自身が所有するクリップフォルダのリストを取得します。
     *
     * @return List&lt;ClipFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public List<ClipFolder> getClipFolders() throws ApiException {
        ApiResponse<List<ClipFolder>> localVarResp = getClipFoldersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * クリップフォルダのリストを取得
     * 自身が所有するクリップフォルダのリストを取得します。
     *
     * @return ApiResponse&lt;List&lt;ClipFolder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<ClipFolder>> getClipFoldersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getClipFoldersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ClipFolder>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * クリップフォルダのリストを取得 (asynchronously)
     * 自身が所有するクリップフォルダのリストを取得します。
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getClipFoldersAsync(final ApiCallback<List<ClipFolder>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClipFoldersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ClipFolder>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getClips
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getClipsCall(UUID folderId, Integer limit, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clip-folders/{folderId}/messages"
                .replaceAll("\\{" + "folderId" + "\\}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClipsValidateBeforeCall(UUID folderId, Integer limit, Integer offset, String order, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getClips(Async)");
        }


        okhttp3.Call localVarCall = getClipsCall(folderId, limit, offset, order, _callback);
        return localVarCall;

    }

    /**
     * フォルダ内のクリップのリストを取得
     * 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
     *
     * @param folderId クリップフォルダUUID (required)
     * @param limit    取得する件数 (optional, default to 0)
     * @param offset   取得するオフセット (optional, default to 0)
     * @param order    昇順か降順か (optional, default to desc)
     * @return List&lt;ClippedMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<ClippedMessage> getClips(UUID folderId, Integer limit, Integer offset, String order) throws ApiException {
        ApiResponse<List<ClippedMessage>> localVarResp = getClipsWithHttpInfo(folderId, limit, offset, order);
        return localVarResp.getData();
    }

    /**
     * フォルダ内のクリップのリストを取得
     * 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
     *
     * @param folderId クリップフォルダUUID (required)
     * @param limit    取得する件数 (optional, default to 0)
     * @param offset   取得するオフセット (optional, default to 0)
     * @param order    昇順か降順か (optional, default to desc)
     * @return ApiResponse&lt;List&lt;ClippedMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<ClippedMessage>> getClipsWithHttpInfo(UUID folderId, Integer limit, Integer offset, String order) throws ApiException {
        okhttp3.Call localVarCall = getClipsValidateBeforeCall(folderId, limit, offset, order, null);
        Type localVarReturnType = new TypeToken<List<ClippedMessage>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * フォルダ内のクリップのリストを取得 (asynchronously)
     * 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getClipsAsync(UUID folderId, Integer limit, Integer offset, String order, final ApiCallback<List<ClippedMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClipsValidateBeforeCall(folderId, limit, offset, order, _callback);
        Type localVarReturnType = new TypeToken<List<ClippedMessage>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMessageClips
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageClipsCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/clips"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageClipsValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageClips(Async)");
        }


        okhttp3.Call localVarCall = getMessageClipsCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * 自分のクリップを取得
     * 対象のメッセージの自分のクリップの一覧を返します。
     *
     * @param messageId メッセージUUID (required)
     * @return List&lt;MessageClip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public List<MessageClip> getMessageClips(UUID messageId) throws ApiException {
        ApiResponse<List<MessageClip>> localVarResp = getMessageClipsWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * 自分のクリップを取得
     * 対象のメッセージの自分のクリップの一覧を返します。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;List&lt;MessageClip&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<MessageClip>> getMessageClipsWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = getMessageClipsValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<List<MessageClip>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 自分のクリップを取得 (asynchronously)
     * 対象のメッセージの自分のクリップの一覧を返します。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageClipsAsync(UUID messageId, final ApiCallback<List<MessageClip>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageClipsValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<List<MessageClip>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for unclipMessage
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 外しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call unclipMessageCall(UUID folderId, UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clip-folders/{folderId}/messages/{messageId}"
                .replaceAll("\\{" + "folderId" + "\\}", localVarApiClient.escapeString(folderId.toString()))
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unclipMessageValidateBeforeCall(UUID folderId, UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling unclipMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling unclipMessage(Async)");
        }


        okhttp3.Call localVarCall = unclipMessageCall(folderId, messageId, _callback);
        return localVarCall;

    }

    /**
     * メッセージをクリップフォルダから除外
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param messageId メッセージUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 外しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void unclipMessage(UUID folderId, UUID messageId) throws ApiException {
        unclipMessageWithHttpInfo(folderId, messageId);
    }

    /**
     * メッセージをクリップフォルダから除外
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 外しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> unclipMessageWithHttpInfo(UUID folderId, UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = unclipMessageValidateBeforeCall(folderId, messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * メッセージをクリップフォルダから除外 (asynchronously)
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     *
     * @param folderId  クリップフォルダUUID (required)
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 外しました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found クリップフォルダが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call unclipMessageAsync(UUID folderId, UUID messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unclipMessageValidateBeforeCall(folderId, messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
