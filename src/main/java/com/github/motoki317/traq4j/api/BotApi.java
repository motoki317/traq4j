/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;
import com.github.motoki317.traq4j.ProgressRequestBody;
import com.github.motoki317.traq4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.motoki317.traq4j.model.Bot;
import com.github.motoki317.traq4j.model.BotDetail;
import com.github.motoki317.traq4j.model.BotEventLog;
import com.github.motoki317.traq4j.model.BotTokens;
import com.github.motoki317.traq4j.model.BotUser;
import java.io.File;
import com.github.motoki317.traq4j.model.GetBot200Response;
import com.github.motoki317.traq4j.model.PatchBotRequest;
import com.github.motoki317.traq4j.model.PostBotActionJoinRequest;
import com.github.motoki317.traq4j.model.PostBotActionLeaveRequest;
import com.github.motoki317.traq4j.model.PostBotRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BotApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BotApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateBot
     * @param botId BOTUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateBotCall(UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}/actions/activate"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateBotValidateBeforeCall(UUID botId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling activateBot(Async)");
        }
        

        okhttp3.Call localVarCall = activateBotCall(botId, _callback);
        return localVarCall;

    }

    /**
     * BOTをアクティベート
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void activateBot(UUID botId) throws ApiException {
        activateBotWithHttpInfo(botId);
    }

    /**
     * BOTをアクティベート
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activateBotWithHttpInfo(UUID botId) throws ApiException {
        okhttp3.Call localVarCall = activateBotValidateBeforeCall(botId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * BOTをアクティベート (asynchronously)
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateBotAsync(UUID botId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateBotValidateBeforeCall(botId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeBotIcon
     * @param botId BOTUUID (required)
     * @param _file アイコン画像(1MBまでのpng, jpeg, gif) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeBotIconCall(UUID botId, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}/icon"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeBotIconValidateBeforeCall(UUID botId, File _file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling changeBotIcon(Async)");
        }
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling changeBotIcon(Async)");
        }
        

        okhttp3.Call localVarCall = changeBotIconCall(botId, _file, _callback);
        return localVarCall;

    }

    /**
     * BOTのアイコン画像を変更
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param _file アイコン画像(1MBまでのpng, jpeg, gif) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public void changeBotIcon(UUID botId, File _file) throws ApiException {
        changeBotIconWithHttpInfo(botId, _file);
    }

    /**
     * BOTのアイコン画像を変更
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param _file アイコン画像(1MBまでのpng, jpeg, gif) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeBotIconWithHttpInfo(UUID botId, File _file) throws ApiException {
        okhttp3.Call localVarCall = changeBotIconValidateBeforeCall(botId, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * BOTのアイコン画像を変更 (asynchronously)
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param _file アイコン画像(1MBまでのpng, jpeg, gif) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更されました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeBotIconAsync(UUID botId, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeBotIconValidateBeforeCall(botId, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectBotWS
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switching Protocols </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectBotWSCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/ws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectBotWSValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = connectBotWSCall(_callback);
        return localVarCall;

    }

    /**
     * WebSocket Mode BOT用通知ストリームに接続します
     * # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switching Protocols </td><td>  -  </td></tr>
     </table>
     */
    public void connectBotWS() throws ApiException {
        connectBotWSWithHttpInfo();
    }

    /**
     * WebSocket Mode BOT用通知ストリームに接続します
     * # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switching Protocols </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> connectBotWSWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = connectBotWSValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * WebSocket Mode BOT用通知ストリームに接続します (asynchronously)
     * # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switching Protocols </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectBotWSAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectBotWSValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBot
     * @param postBotRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に使われている名前です。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBotCall(PostBotRequest postBotRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postBotRequest;

        // create path and map variables
        String localVarPath = "/bots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBotValidateBeforeCall(PostBotRequest postBotRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createBotCall(postBotRequest, _callback);
        return localVarCall;

    }

    /**
     * BOTを作成
     * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     * @param postBotRequest  (optional)
     * @return BotDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に使われている名前です。 </td><td>  -  </td></tr>
     </table>
     */
    public BotDetail createBot(PostBotRequest postBotRequest) throws ApiException {
        ApiResponse<BotDetail> localVarResp = createBotWithHttpInfo(postBotRequest);
        return localVarResp.getData();
    }

    /**
     * BOTを作成
     * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     * @param postBotRequest  (optional)
     * @return ApiResponse&lt;BotDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に使われている名前です。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotDetail> createBotWithHttpInfo(PostBotRequest postBotRequest) throws ApiException {
        okhttp3.Call localVarCall = createBotValidateBeforeCall(postBotRequest, null);
        Type localVarReturnType = new TypeToken<BotDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BOTを作成 (asynchronously)
     * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     * @param postBotRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict 既に使われている名前です。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBotAsync(PostBotRequest postBotRequest, final ApiCallback<BotDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBotValidateBeforeCall(postBotRequest, _callback);
        Type localVarReturnType = new TypeToken<BotDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBot
     * @param botId BOTUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotCall(UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBotValidateBeforeCall(UUID botId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling deleteBot(Async)");
        }
        

        okhttp3.Call localVarCall = deleteBotCall(botId, _callback);
        return localVarCall;

    }

    /**
     * BOTを削除
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBot(UUID botId) throws ApiException {
        deleteBotWithHttpInfo(botId);
    }

    /**
     * BOTを削除
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBotWithHttpInfo(UUID botId) throws ApiException {
        okhttp3.Call localVarCall = deleteBotValidateBeforeCall(botId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * BOTを削除 (asynchronously)
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 削除しました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBotAsync(UUID botId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBotValidateBeforeCall(botId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editBot
     * @param botId BOTUUID (required)
     * @param patchBotRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editBotCall(UUID botId, PatchBotRequest patchBotRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchBotRequest;

        // create path and map variables
        String localVarPath = "/bots/{botId}"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editBotValidateBeforeCall(UUID botId, PatchBotRequest patchBotRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling editBot(Async)");
        }
        

        okhttp3.Call localVarCall = editBotCall(botId, patchBotRequest, _callback);
        return localVarCall;

    }

    /**
     * BOT情報を変更
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @param botId BOTUUID (required)
     * @param patchBotRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void editBot(UUID botId, PatchBotRequest patchBotRequest) throws ApiException {
        editBotWithHttpInfo(botId, patchBotRequest);
    }

    /**
     * BOT情報を変更
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @param botId BOTUUID (required)
     * @param patchBotRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editBotWithHttpInfo(UUID botId, PatchBotRequest patchBotRequest) throws ApiException {
        okhttp3.Call localVarCall = editBotValidateBeforeCall(botId, patchBotRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * BOT情報を変更 (asynchronously)
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @param botId BOTUUID (required)
     * @param patchBotRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content 変更しました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editBotAsync(UUID botId, PatchBotRequest patchBotRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editBotValidateBeforeCall(botId, patchBotRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBot
     * @param botId BOTUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotCall(UUID botId, Boolean detail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBotValidateBeforeCall(UUID botId, Boolean detail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling getBot(Async)");
        }
        

        okhttp3.Call localVarCall = getBotCall(botId, detail, _callback);
        return localVarCall;

    }

    /**
     * BOT情報を取得
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @return GetBot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetBot200Response getBot(UUID botId, Boolean detail) throws ApiException {
        ApiResponse<GetBot200Response> localVarResp = getBotWithHttpInfo(botId, detail);
        return localVarResp.getData();
    }

    /**
     * BOT情報を取得
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @return ApiResponse&lt;GetBot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBot200Response> getBotWithHttpInfo(UUID botId, Boolean detail) throws ApiException {
        okhttp3.Call localVarCall = getBotValidateBeforeCall(botId, detail, null);
        Type localVarReturnType = new TypeToken<GetBot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BOT情報を取得 (asynchronously)
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotAsync(UUID botId, Boolean detail, final ApiCallback<GetBot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBotValidateBeforeCall(botId, detail, _callback);
        Type localVarReturnType = new TypeToken<GetBot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBotIcon
     * @param botId BOTUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotIconCall(UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}/icon"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/jpeg", "image/gif", "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBotIconValidateBeforeCall(UUID botId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling getBotIcon(Async)");
        }
        

        okhttp3.Call localVarCall = getBotIconCall(botId, _callback);
        return localVarCall;

    }

    /**
     * BOTのアイコン画像を取得
     * 指定したBOTのアイコン画像を取得を取得します。
     * @param botId BOTUUID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public File getBotIcon(UUID botId) throws ApiException {
        ApiResponse<File> localVarResp = getBotIconWithHttpInfo(botId);
        return localVarResp.getData();
    }

    /**
     * BOTのアイコン画像を取得
     * 指定したBOTのアイコン画像を取得を取得します。
     * @param botId BOTUUID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getBotIconWithHttpInfo(UUID botId) throws ApiException {
        okhttp3.Call localVarCall = getBotIconValidateBeforeCall(botId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BOTのアイコン画像を取得 (asynchronously)
     * 指定したBOTのアイコン画像を取得を取得します。
     * @param botId BOTUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotIconAsync(UUID botId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBotIconValidateBeforeCall(botId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBotLogs
     * @param botId BOTUUID (required)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotLogsCall(UUID botId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}/logs"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBotLogsValidateBeforeCall(UUID botId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling getBotLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getBotLogsCall(botId, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * BOTのイベントログを取得
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @return List&lt;BotEventLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public List<BotEventLog> getBotLogs(UUID botId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<BotEventLog>> localVarResp = getBotLogsWithHttpInfo(botId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * BOTのイベントログを取得
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @return ApiResponse&lt;List&lt;BotEventLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BotEventLog>> getBotLogsWithHttpInfo(UUID botId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBotLogsValidateBeforeCall(botId, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<BotEventLog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BOTのイベントログを取得 (asynchronously)
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotLogsAsync(UUID botId, Integer limit, Integer offset, final ApiCallback<List<BotEventLog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBotLogsValidateBeforeCall(botId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<BotEventLog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBots
     * @param all 全てのBOTを取得するかどうか (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotsCall(Boolean all, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBotsValidateBeforeCall(Boolean all, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBotsCall(all, _callback);
        return localVarCall;

    }

    /**
     * BOTリストを取得
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @param all 全てのBOTを取得するかどうか (optional, default to false)
     * @return List&lt;Bot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Bot> getBots(Boolean all) throws ApiException {
        ApiResponse<List<Bot>> localVarResp = getBotsWithHttpInfo(all);
        return localVarResp.getData();
    }

    /**
     * BOTリストを取得
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @param all 全てのBOTを取得するかどうか (optional, default to false)
     * @return ApiResponse&lt;List&lt;Bot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Bot>> getBotsWithHttpInfo(Boolean all) throws ApiException {
        okhttp3.Call localVarCall = getBotsValidateBeforeCall(all, null);
        Type localVarReturnType = new TypeToken<List<Bot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BOTリストを取得 (asynchronously)
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @param all 全てのBOTを取得するかどうか (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotsAsync(Boolean all, final ApiCallback<List<Bot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBotsValidateBeforeCall(all, _callback);
        Type localVarReturnType = new TypeToken<List<Bot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelBots
     * @param channelId チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelBotsCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/bots"
            .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelBotsValidateBeforeCall(UUID channelId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelBots(Async)");
        }
        

        okhttp3.Call localVarCall = getChannelBotsCall(channelId, _callback);
        return localVarCall;

    }

    /**
     * チャンネル参加中のBOTのリストを取得
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @param channelId チャンネルUUID (required)
     * @return List&lt;BotUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public List<BotUser> getChannelBots(UUID channelId) throws ApiException {
        ApiResponse<List<BotUser>> localVarResp = getChannelBotsWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * チャンネル参加中のBOTのリストを取得
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @param channelId チャンネルUUID (required)
     * @return ApiResponse&lt;List&lt;BotUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BotUser>> getChannelBotsWithHttpInfo(UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelBotsValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<BotUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネル参加中のBOTのリストを取得 (asynchronously)
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @param channelId チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelBotsAsync(UUID channelId, final ApiCallback<List<BotUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelBotsValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<BotUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inactivateBot
     * @param botId BOTUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTがインアクティベートされました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inactivateBotCall(UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}/actions/inactivate"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inactivateBotValidateBeforeCall(UUID botId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling inactivateBot(Async)");
        }
        

        okhttp3.Call localVarCall = inactivateBotCall(botId, _callback);
        return localVarCall;

    }

    /**
     * BOTをインアクティベート
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTがインアクティベートされました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void inactivateBot(UUID botId) throws ApiException {
        inactivateBotWithHttpInfo(botId);
    }

    /**
     * BOTをインアクティベート
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTがインアクティベートされました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> inactivateBotWithHttpInfo(UUID botId) throws ApiException {
        okhttp3.Call localVarCall = inactivateBotValidateBeforeCall(botId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * BOTをインアクティベート (asynchronously)
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTがインアクティベートされました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inactivateBotAsync(UUID botId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = inactivateBotValidateBeforeCall(botId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for letBotJoinChannel
     * @param botId BOTUUID (required)
     * @param postBotActionJoinRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを参加させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call letBotJoinChannelCall(UUID botId, PostBotActionJoinRequest postBotActionJoinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postBotActionJoinRequest;

        // create path and map variables
        String localVarPath = "/bots/{botId}/actions/join"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call letBotJoinChannelValidateBeforeCall(UUID botId, PostBotActionJoinRequest postBotActionJoinRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling letBotJoinChannel(Async)");
        }
        

        okhttp3.Call localVarCall = letBotJoinChannelCall(botId, postBotActionJoinRequest, _callback);
        return localVarCall;

    }

    /**
     * BOTをチャンネルに参加させる
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param postBotActionJoinRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを参加させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void letBotJoinChannel(UUID botId, PostBotActionJoinRequest postBotActionJoinRequest) throws ApiException {
        letBotJoinChannelWithHttpInfo(botId, postBotActionJoinRequest);
    }

    /**
     * BOTをチャンネルに参加させる
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param postBotActionJoinRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを参加させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> letBotJoinChannelWithHttpInfo(UUID botId, PostBotActionJoinRequest postBotActionJoinRequest) throws ApiException {
        okhttp3.Call localVarCall = letBotJoinChannelValidateBeforeCall(botId, postBotActionJoinRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * BOTをチャンネルに参加させる (asynchronously)
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param postBotActionJoinRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを参加させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call letBotJoinChannelAsync(UUID botId, PostBotActionJoinRequest postBotActionJoinRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = letBotJoinChannelValidateBeforeCall(botId, postBotActionJoinRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for letBotLeaveChannel
     * @param botId BOTUUID (required)
     * @param postBotActionLeaveRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを退出させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call letBotLeaveChannelCall(UUID botId, PostBotActionLeaveRequest postBotActionLeaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postBotActionLeaveRequest;

        // create path and map variables
        String localVarPath = "/bots/{botId}/actions/leave"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call letBotLeaveChannelValidateBeforeCall(UUID botId, PostBotActionLeaveRequest postBotActionLeaveRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling letBotLeaveChannel(Async)");
        }
        

        okhttp3.Call localVarCall = letBotLeaveChannelCall(botId, postBotActionLeaveRequest, _callback);
        return localVarCall;

    }

    /**
     * BOTをチャンネルから退出させる
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param postBotActionLeaveRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを退出させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public void letBotLeaveChannel(UUID botId, PostBotActionLeaveRequest postBotActionLeaveRequest) throws ApiException {
        letBotLeaveChannelWithHttpInfo(botId, postBotActionLeaveRequest);
    }

    /**
     * BOTをチャンネルから退出させる
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param postBotActionLeaveRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを退出させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> letBotLeaveChannelWithHttpInfo(UUID botId, PostBotActionLeaveRequest postBotActionLeaveRequest) throws ApiException {
        okhttp3.Call localVarCall = letBotLeaveChannelValidateBeforeCall(botId, postBotActionLeaveRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * BOTをチャンネルから退出させる (asynchronously)
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param postBotActionLeaveRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content BOTを退出させました。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call letBotLeaveChannelAsync(UUID botId, PostBotActionLeaveRequest postBotActionLeaveRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = letBotLeaveChannelValidateBeforeCall(botId, postBotActionLeaveRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reissueBot
     * @param botId BOTUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reissueBotCall(UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bots/{botId}/actions/reissue"
            .replaceAll("\\{" + "botId" + "\\}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reissueBotValidateBeforeCall(UUID botId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling reissueBot(Async)");
        }
        

        okhttp3.Call localVarCall = reissueBotCall(botId, _callback);
        return localVarCall;

    }

    /**
     * BOTのトークンを再発行
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @return BotTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public BotTokens reissueBot(UUID botId) throws ApiException {
        ApiResponse<BotTokens> localVarResp = reissueBotWithHttpInfo(botId);
        return localVarResp.getData();
    }

    /**
     * BOTのトークンを再発行
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @return ApiResponse&lt;BotTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotTokens> reissueBotWithHttpInfo(UUID botId) throws ApiException {
        okhttp3.Call localVarCall = reissueBotValidateBeforeCall(botId, null);
        Type localVarReturnType = new TypeToken<BotTokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BOTのトークンを再発行 (asynchronously)
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found BOTが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reissueBotAsync(UUID botId, final ApiCallback<BotTokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = reissueBotValidateBeforeCall(botId, _callback);
        Type localVarReturnType = new TypeToken<BotTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
