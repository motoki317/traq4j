/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.motoki317.traq4j.model.OAuth2Client;
import com.github.motoki317.traq4j.model.OAuth2ClientDetail;
import com.github.motoki317.traq4j.model.OAuth2Scope;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.github.motoki317.traq4j.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T02:01:01.991892Z[Etc/UTC]")
public class GetClient200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetClient200Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetClient200Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetClient200Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OAuth2Client> adapterOAuth2Client = gson.getDelegateAdapter(this, TypeToken.get(OAuth2Client.class));
            final TypeAdapter<OAuth2ClientDetail> adapterOAuth2ClientDetail = gson.getDelegateAdapter(this, TypeToken.get(OAuth2ClientDetail.class));

            return (TypeAdapter<T>) new TypeAdapter<GetClient200Response>() {
                @Override
                public void write(JsonWriter out, GetClient200Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `OAuth2Client`
                    if (value.getActualInstance() instanceof OAuth2Client) {
                        JsonObject obj = adapterOAuth2Client.toJsonTree((OAuth2Client)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `OAuth2ClientDetail`
                    if (value.getActualInstance() instanceof OAuth2ClientDetail) {
                        JsonObject obj = adapterOAuth2ClientDetail.toJsonTree((OAuth2ClientDetail)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: OAuth2Client, OAuth2ClientDetail");
                }

                @Override
                public GetClient200Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize OAuth2Client
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuth2Client.validateJsonObject(jsonObject);
                        actualAdapter = adapterOAuth2Client;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuth2Client'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuth2Client failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuth2Client'", e);
                    }

                    // deserialize OAuth2ClientDetail
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuth2ClientDetail.validateJsonObject(jsonObject);
                        actualAdapter = adapterOAuth2ClientDetail;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuth2ClientDetail'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuth2ClientDetail failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuth2ClientDetail'", e);
                    }

                    if (match == 1) {
                        GetClient200Response ret = new GetClient200Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetClient200Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetClient200Response() {
        super("oneOf", Boolean.FALSE);
    }

    public GetClient200Response(OAuth2Client o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetClient200Response(OAuth2ClientDetail o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("OAuth2Client", new GenericType<OAuth2Client>() {
        });
        schemas.put("OAuth2ClientDetail", new GenericType<OAuth2ClientDetail>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetClient200Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * OAuth2Client, OAuth2ClientDetail
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof OAuth2Client) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuth2ClientDetail) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be OAuth2Client, OAuth2ClientDetail");
    }

    /**
     * Get the actual instance, which can be the following:
     * OAuth2Client, OAuth2ClientDetail
     *
     * @return The actual instance (OAuth2Client, OAuth2ClientDetail)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `OAuth2Client`. If the actual instance is not `OAuth2Client`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuth2Client`
     * @throws ClassCastException if the instance is not `OAuth2Client`
     */
    public OAuth2Client getOAuth2Client() throws ClassCastException {
        return (OAuth2Client)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OAuth2ClientDetail`. If the actual instance is not `OAuth2ClientDetail`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuth2ClientDetail`
     * @throws ClassCastException if the instance is not `OAuth2ClientDetail`
     */
    public OAuth2ClientDetail getOAuth2ClientDetail() throws ClassCastException {
        return (OAuth2ClientDetail)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetClient200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with OAuth2Client
    try {
      OAuth2Client.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for OAuth2Client failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with OAuth2ClientDetail
    try {
      OAuth2ClientDetail.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for OAuth2ClientDetail failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetClient200Response with oneOf schemas: OAuth2Client, OAuth2ClientDetail. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetClient200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetClient200Response
  * @throws IOException if the JSON string is invalid with respect to GetClient200Response
  */
  public static GetClient200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetClient200Response.class);
  }

 /**
  * Convert an instance of GetClient200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

