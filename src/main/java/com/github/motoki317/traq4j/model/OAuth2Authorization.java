/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * OAuth2Authorization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-06-05T13:16:54.379Z[GMT]")
public class OAuth2Authorization {
  public static final String SERIALIZED_NAME_RESPONSE_TYPE = "response_type";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPE)
  private OAuth2ResponseType responseType;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_REDIRECT_URI = "redirect_uri";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URI)
  private String redirectUri;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_CODE_CHALLENGE = "code_challenge";
  @SerializedName(SERIALIZED_NAME_CODE_CHALLENGE)
  private String codeChallenge;

  public static final String SERIALIZED_NAME_CODE_CHALLENGE_METHOD = "code_challenge_method";
  @SerializedName(SERIALIZED_NAME_CODE_CHALLENGE_METHOD)
  private String codeChallengeMethod;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private OAuth2Prompt prompt;


  public OAuth2Authorization responseType(OAuth2ResponseType responseType) {
    
    this.responseType = responseType;
    return this;
  }

   /**
   * Get responseType
   * @return responseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OAuth2ResponseType getResponseType() {
    return responseType;
  }


  public void setResponseType(OAuth2ResponseType responseType) {
    this.responseType = responseType;
  }


  public OAuth2Authorization clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @ApiModelProperty(required = true, value = "")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OAuth2Authorization redirectUri(String redirectUri) {
    
    this.redirectUri = redirectUri;
    return this;
  }

   /**
   * Get redirectUri
   * @return redirectUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRedirectUri() {
    return redirectUri;
  }


  public void setRedirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
  }


  public OAuth2Authorization scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public OAuth2Authorization state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public OAuth2Authorization codeChallenge(String codeChallenge) {
    
    this.codeChallenge = codeChallenge;
    return this;
  }

   /**
   * Get codeChallenge
   * @return codeChallenge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCodeChallenge() {
    return codeChallenge;
  }


  public void setCodeChallenge(String codeChallenge) {
    this.codeChallenge = codeChallenge;
  }


  public OAuth2Authorization codeChallengeMethod(String codeChallengeMethod) {
    
    this.codeChallengeMethod = codeChallengeMethod;
    return this;
  }

   /**
   * Get codeChallengeMethod
   * @return codeChallengeMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCodeChallengeMethod() {
    return codeChallengeMethod;
  }


  public void setCodeChallengeMethod(String codeChallengeMethod) {
    this.codeChallengeMethod = codeChallengeMethod;
  }


  public OAuth2Authorization nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public OAuth2Authorization prompt(OAuth2Prompt prompt) {
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OAuth2Prompt getPrompt() {
    return prompt;
  }


  public void setPrompt(OAuth2Prompt prompt) {
    this.prompt = prompt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Authorization oauth2Authorization = (OAuth2Authorization) o;
    return Objects.equals(this.responseType, oauth2Authorization.responseType) &&
        Objects.equals(this.clientId, oauth2Authorization.clientId) &&
        Objects.equals(this.redirectUri, oauth2Authorization.redirectUri) &&
        Objects.equals(this.scope, oauth2Authorization.scope) &&
        Objects.equals(this.state, oauth2Authorization.state) &&
        Objects.equals(this.codeChallenge, oauth2Authorization.codeChallenge) &&
        Objects.equals(this.codeChallengeMethod, oauth2Authorization.codeChallengeMethod) &&
        Objects.equals(this.nonce, oauth2Authorization.nonce) &&
        Objects.equals(this.prompt, oauth2Authorization.prompt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Authorization {\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    redirectUri: ").append(toIndentedString(redirectUri)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    codeChallenge: ").append(toIndentedString(codeChallenge)).append("\n");
    sb.append("    codeChallengeMethod: ").append(toIndentedString(codeChallengeMethod)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

