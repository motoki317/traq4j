/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.motoki317.traq4j.model.FileInfoThumbnail;
import com.github.motoki317.traq4j.model.ThumbnailInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.github.motoki317.traq4j.JSON;

/**
 * ファイル情報
 */
@ApiModel(description = "ファイル情報")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T02:01:01.991892Z[Etc/UTC]")
public class FileInfo {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MIME = "mime";
  @SerializedName(SERIALIZED_NAME_MIME)
  private String mime;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_MD5 = "md5";
  @SerializedName(SERIALIZED_NAME_MD5)
  private String md5;

  public static final String SERIALIZED_NAME_IS_ANIMATED_IMAGE = "isAnimatedImage";
  @SerializedName(SERIALIZED_NAME_IS_ANIMATED_IMAGE)
  private Boolean isAnimatedImage;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<ThumbnailInfo> thumbnails = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private FileInfoThumbnail thumbnail;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private UUID channelId;

  public static final String SERIALIZED_NAME_UPLOADER_ID = "uploaderId";
  @SerializedName(SERIALIZED_NAME_UPLOADER_ID)
  private UUID uploaderId;

  public FileInfo() { 
  }

  public FileInfo id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * ファイルUUID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ファイルUUID")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public FileInfo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * ファイル名
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ファイル名")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FileInfo mime(String mime) {
    
    this.mime = mime;
    return this;
  }

   /**
   * MIMEタイプ
   * @return mime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "MIMEタイプ")

  public String getMime() {
    return mime;
  }


  public void setMime(String mime) {
    this.mime = mime;
  }


  public FileInfo size(Long size) {
    
    this.size = size;
    return this;
  }

   /**
   * ファイルサイズ
   * @return size
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ファイルサイズ")

  public Long getSize() {
    return size;
  }


  public void setSize(Long size) {
    this.size = size;
  }


  public FileInfo md5(String md5) {
    
    this.md5 = md5;
    return this;
  }

   /**
   * MD5ハッシュ
   * @return md5
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "MD5ハッシュ")

  public String getMd5() {
    return md5;
  }


  public void setMd5(String md5) {
    this.md5 = md5;
  }


  public FileInfo isAnimatedImage(Boolean isAnimatedImage) {
    
    this.isAnimatedImage = isAnimatedImage;
    return this;
  }

   /**
   * アニメーション画像かどうか
   * @return isAnimatedImage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "アニメーション画像かどうか")

  public Boolean getIsAnimatedImage() {
    return isAnimatedImage;
  }


  public void setIsAnimatedImage(Boolean isAnimatedImage) {
    this.isAnimatedImage = isAnimatedImage;
  }


  public FileInfo createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * アップロード日時
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "アップロード日時")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FileInfo thumbnails(List<ThumbnailInfo> thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

  public FileInfo addThumbnailsItem(ThumbnailInfo thumbnailsItem) {
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ThumbnailInfo> getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(List<ThumbnailInfo> thumbnails) {
    this.thumbnails = thumbnails;
  }


  public FileInfo thumbnail(FileInfoThumbnail thumbnail) {
    
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * Get thumbnail
   * @return thumbnail
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public FileInfoThumbnail getThumbnail() {
    return thumbnail;
  }


  public void setThumbnail(FileInfoThumbnail thumbnail) {
    this.thumbnail = thumbnail;
  }


  public FileInfo channelId(UUID channelId) {
    
    this.channelId = channelId;
    return this;
  }

   /**
   * 属しているチャンネルUUID
   * @return channelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "属しているチャンネルUUID")

  public UUID getChannelId() {
    return channelId;
  }


  public void setChannelId(UUID channelId) {
    this.channelId = channelId;
  }


  public FileInfo uploaderId(UUID uploaderId) {
    
    this.uploaderId = uploaderId;
    return this;
  }

   /**
   * アップロード者UUID
   * @return uploaderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "アップロード者UUID")

  public UUID getUploaderId() {
    return uploaderId;
  }


  public void setUploaderId(UUID uploaderId) {
    this.uploaderId = uploaderId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileInfo fileInfo = (FileInfo) o;
    return Objects.equals(this.id, fileInfo.id) &&
        Objects.equals(this.name, fileInfo.name) &&
        Objects.equals(this.mime, fileInfo.mime) &&
        Objects.equals(this.size, fileInfo.size) &&
        Objects.equals(this.md5, fileInfo.md5) &&
        Objects.equals(this.isAnimatedImage, fileInfo.isAnimatedImage) &&
        Objects.equals(this.createdAt, fileInfo.createdAt) &&
        Objects.equals(this.thumbnails, fileInfo.thumbnails) &&
        Objects.equals(this.thumbnail, fileInfo.thumbnail) &&
        Objects.equals(this.channelId, fileInfo.channelId) &&
        Objects.equals(this.uploaderId, fileInfo.uploaderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, mime, size, md5, isAnimatedImage, createdAt, thumbnails, thumbnail, channelId, uploaderId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mime: ").append(toIndentedString(mime)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    isAnimatedImage: ").append(toIndentedString(isAnimatedImage)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    uploaderId: ").append(toIndentedString(uploaderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("mime");
    openapiFields.add("size");
    openapiFields.add("md5");
    openapiFields.add("isAnimatedImage");
    openapiFields.add("createdAt");
    openapiFields.add("thumbnails");
    openapiFields.add("thumbnail");
    openapiFields.add("channelId");
    openapiFields.add("uploaderId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("mime");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("md5");
    openapiRequiredFields.add("isAnimatedImage");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("thumbnails");
    openapiRequiredFields.add("thumbnail");
    openapiRequiredFields.add("channelId");
    openapiRequiredFields.add("uploaderId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FileInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileInfo is not found in the empty JSON string", FileInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FileInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("mime") != null && !jsonObj.get("mime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime").toString()));
      }
      if (jsonObj.get("md5") != null && !jsonObj.get("md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5").toString()));
      }
      JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
      if (jsonArraythumbnails != null) {
        // ensure the json data is an array
        if (!jsonObj.get("thumbnails").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
        }

        // validate the optional field `thumbnails` (array)
        for (int i = 0; i < jsonArraythumbnails.size(); i++) {
          ThumbnailInfo.validateJsonObject(jsonArraythumbnails.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `thumbnail`
      if (jsonObj.getAsJsonObject("thumbnail") != null) {
        FileInfoThumbnail.validateJsonObject(jsonObj.getAsJsonObject("thumbnail"));
      }
      if (jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if (jsonObj.get("uploaderId") != null && !jsonObj.get("uploaderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaderId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<FileInfo>() {
           @Override
           public void write(JsonWriter out, FileInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileInfo
  * @throws IOException if the JSON string is invalid with respect to FileInfo
  */
  public static FileInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileInfo.class);
  }

 /**
  * Convert an instance of FileInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

