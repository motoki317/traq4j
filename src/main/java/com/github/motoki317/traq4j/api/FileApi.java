/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;
import com.github.motoki317.traq4j.ProgressRequestBody;
import com.github.motoki317.traq4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.github.motoki317.traq4j.model.FileInfo;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFile
     * @param fileId ファイルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content ファイルが削除できました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCall(UUID fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(UUID fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFile(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFileCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * ファイルを削除
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @param fileId ファイルUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content ファイルが削除できました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFile(UUID fileId) throws ApiException {
        deleteFileWithHttpInfo(fileId);
    }

    /**
     * ファイルを削除
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @param fileId ファイルUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content ファイルが削除できました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFileWithHttpInfo(UUID fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ファイルを削除 (asynchronously)
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content ファイルが削除できました。 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAsync(UUID fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param fileId ファイルUUID (required)
     * @param dl 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK ファイル本体を返します。 application/octet-streamで返すことになっていますが、ファイルの形式によって変わります。 </td><td>  * Content-Disposition - https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(UUID fileId, Integer dl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dl", dl));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(UUID fileId, Integer dl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }
        

        okhttp3.Call localVarCall = getFileCall(fileId, dl, _callback);
        return localVarCall;

    }

    /**
     * ファイルをダウンロード
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param dl 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK ファイル本体を返します。 application/octet-streamで返すことになっていますが、ファイルの形式によって変わります。 </td><td>  * Content-Disposition - https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public File getFile(UUID fileId, Integer dl) throws ApiException {
        ApiResponse<File> localVarResp = getFileWithHttpInfo(fileId, dl);
        return localVarResp.getData();
    }

    /**
     * ファイルをダウンロード
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param dl 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK ファイル本体を返します。 application/octet-streamで返すことになっていますが、ファイルの形式によって変わります。 </td><td>  * Content-Disposition - https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getFileWithHttpInfo(UUID fileId, Integer dl) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, dl, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ファイルをダウンロード (asynchronously)
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param dl 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK ファイル本体を返します。 application/octet-streamで返すことになっていますが、ファイルの形式によって変わります。 </td><td>  * Content-Disposition - https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(UUID fileId, Integer dl, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, dl, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileMeta
     * @param fileId ファイルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileMetaCall(UUID fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/meta"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileMetaValidateBeforeCall(UUID fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileMeta(Async)");
        }
        

        okhttp3.Call localVarCall = getFileMetaCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * ファイルメタを取得
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @return FileInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public FileInfo getFileMeta(UUID fileId) throws ApiException {
        ApiResponse<FileInfo> localVarResp = getFileMetaWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * ファイルメタを取得
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @return ApiResponse&lt;FileInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileInfo> getFileMetaWithHttpInfo(UUID fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileMetaValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<FileInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ファイルメタを取得 (asynchronously)
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つかりません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileMetaAsync(UUID fileId, final ApiCallback<FileInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileMetaValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<FileInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFiles
     * @param channelId アップロード先チャンネルUUID (optional)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @param mine アップロード者が自分のファイルのみを取得するか (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, Boolean mine, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelId", channelId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (inclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inclusive", inclusive));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (mine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mine", mine));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesValidateBeforeCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, Boolean mine, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getFilesCall(channelId, limit, offset, since, until, inclusive, order, mine, _callback);
        return localVarCall;

    }

    /**
     * ファイルメタのリストを取得
     * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
     * @param channelId アップロード先チャンネルUUID (optional)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @param mine アップロード者が自分のファイルのみを取得するか (optional, default to false)
     * @return List&lt;FileInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<FileInfo> getFiles(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, Boolean mine) throws ApiException {
        ApiResponse<List<FileInfo>> localVarResp = getFilesWithHttpInfo(channelId, limit, offset, since, until, inclusive, order, mine);
        return localVarResp.getData();
    }

    /**
     * ファイルメタのリストを取得
     * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
     * @param channelId アップロード先チャンネルUUID (optional)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @param mine アップロード者が自分のファイルのみを取得するか (optional, default to false)
     * @return ApiResponse&lt;List&lt;FileInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FileInfo>> getFilesWithHttpInfo(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, Boolean mine) throws ApiException {
        okhttp3.Call localVarCall = getFilesValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, mine, null);
        Type localVarReturnType = new TypeToken<List<FileInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ファイルメタのリストを取得 (asynchronously)
     * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
     * @param channelId アップロード先チャンネルUUID (optional)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @param mine アップロード者が自分のファイルのみを取得するか (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAsync(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, Boolean mine, final ApiCallback<List<FileInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, mine, _callback);
        Type localVarReturnType = new TypeToken<List<FileInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThumbnailImage
     * @param fileId ファイルUUID (required)
     * @param type 取得するサムネイルのタイプ (optional, default to image)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つからない、またはサムネイル画像が存在しません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThumbnailImageCall(UUID fileId, ThumbnailType type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/thumbnail"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "image/png", "image/jpeg"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThumbnailImageValidateBeforeCall(UUID fileId, ThumbnailType type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getThumbnailImage(Async)");
        }
        

        okhttp3.Call localVarCall = getThumbnailImageCall(fileId, type, _callback);
        return localVarCall;

    }

    /**
     * サムネイル画像を取得
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param type 取得するサムネイルのタイプ (optional, default to image)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つからない、またはサムネイル画像が存在しません。 </td><td>  -  </td></tr>
     </table>
     */
    public File getThumbnailImage(UUID fileId, ThumbnailType type) throws ApiException {
        ApiResponse<File> localVarResp = getThumbnailImageWithHttpInfo(fileId, type);
        return localVarResp.getData();
    }

    /**
     * サムネイル画像を取得
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param type 取得するサムネイルのタイプ (optional, default to image)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つからない、またはサムネイル画像が存在しません。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getThumbnailImageWithHttpInfo(UUID fileId, ThumbnailType type) throws ApiException {
        okhttp3.Call localVarCall = getThumbnailImageValidateBeforeCall(fileId, type, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * サムネイル画像を取得 (asynchronously)
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID (required)
     * @param type 取得するサムネイルのタイプ (optional, default to image)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found ファイルが見つからない、またはサムネイル画像が存在しません。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThumbnailImageAsync(UUID fileId, ThumbnailType type, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThumbnailImageValidateBeforeCall(fileId, type, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postFile
     * @param _file ファイル本体 (required)
     * @param channelId アップロード先チャンネルUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 411 </td><td> Length Required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFileCall(File _file, UUID channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (channelId != null) {
            localVarFormParams.put("channelId", channelId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFileValidateBeforeCall(File _file, UUID channelId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling postFile(Async)");
        }
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling postFile(Async)");
        }
        

        okhttp3.Call localVarCall = postFileCall(_file, channelId, _callback);
        return localVarCall;

    }

    /**
     * ファイルをアップロード
     * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
     * @param _file ファイル本体 (required)
     * @param channelId アップロード先チャンネルUUID (required)
     * @return FileInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 411 </td><td> Length Required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public FileInfo postFile(File _file, UUID channelId) throws ApiException {
        ApiResponse<FileInfo> localVarResp = postFileWithHttpInfo(_file, channelId);
        return localVarResp.getData();
    }

    /**
     * ファイルをアップロード
     * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
     * @param _file ファイル本体 (required)
     * @param channelId アップロード先チャンネルUUID (required)
     * @return ApiResponse&lt;FileInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 411 </td><td> Length Required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileInfo> postFileWithHttpInfo(File _file, UUID channelId) throws ApiException {
        okhttp3.Call localVarCall = postFileValidateBeforeCall(_file, channelId, null);
        Type localVarReturnType = new TypeToken<FileInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ファイルをアップロード (asynchronously)
     * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
     * @param _file ファイル本体 (required)
     * @param channelId アップロード先チャンネルUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 411 </td><td> Length Required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFileAsync(File _file, UUID channelId, final ApiCallback<FileInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFileValidateBeforeCall(_file, channelId, _callback);
        Type localVarReturnType = new TypeToken<FileInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
