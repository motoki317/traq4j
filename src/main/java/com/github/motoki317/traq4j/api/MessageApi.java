/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.api;

import com.github.motoki317.traq4j.ApiCallback;
import com.github.motoki317.traq4j.ApiClient;
import com.github.motoki317.traq4j.ApiException;
import com.github.motoki317.traq4j.ApiResponse;
import com.github.motoki317.traq4j.Configuration;
import com.github.motoki317.traq4j.Pair;
import com.github.motoki317.traq4j.ProgressRequestBody;
import com.github.motoki317.traq4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.motoki317.traq4j.model.Message;
import com.github.motoki317.traq4j.model.MessageClip;
import com.github.motoki317.traq4j.model.MessagePin;
import com.github.motoki317.traq4j.model.MessageSearchResult;
import com.github.motoki317.traq4j.model.MessageStamp;
import org.threeten.bp.OffsetDateTime;
import com.github.motoki317.traq4j.model.PostMessageRequest;
import com.github.motoki317.traq4j.model.PostMessageStampRequest;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageApi {
    private ApiClient localVarApiClient;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addMessageStamp
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addMessageStampCall(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postMessageStampRequest;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/stamps/{stampId}"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()))
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMessageStampValidateBeforeCall(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling addMessageStamp(Async)");
        }

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling addMessageStamp(Async)");
        }


        okhttp3.Call localVarCall = addMessageStampCall(messageId, stampId, postMessageStampRequest, _callback);
        return localVarCall;

    }

    /**
     * スタンプを押す
     * 指定したメッセージに指定したスタンプを押します。
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void addMessageStamp(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest) throws ApiException {
        addMessageStampWithHttpInfo(messageId, stampId, postMessageStampRequest);
    }

    /**
     * スタンプを押す
     * 指定したメッセージに指定したスタンプを押します。
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> addMessageStampWithHttpInfo(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest) throws ApiException {
        okhttp3.Call localVarCall = addMessageStampValidateBeforeCall(messageId, stampId, postMessageStampRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプを押す (asynchronously)
     * 指定したメッセージに指定したスタンプを押します。
     *
     * @param messageId               メッセージUUID (required)
     * @param stampId                 スタンプUUID (required)
     * @param postMessageStampRequest (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを押すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addMessageStampAsync(UUID messageId, UUID stampId, PostMessageStampRequest postMessageStampRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMessageStampValidateBeforeCall(messageId, stampId, postMessageStampRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for createPin
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created 指定したメッセージがピン留めされました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Forbidden これ以上このメッセージのチャンネルにピン留めすることはできません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPinCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/pin"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPinValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling createPin(Async)");
        }


        okhttp3.Call localVarCall = createPinCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * ピン留めする
     * 指定したメッセージをピン留めします。
     *
     * @param messageId メッセージUUID (required)
     * @return MessagePin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created 指定したメッセージがピン留めされました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Forbidden これ以上このメッセージのチャンネルにピン留めすることはできません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public MessagePin createPin(UUID messageId) throws ApiException {
        ApiResponse<MessagePin> localVarResp = createPinWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * ピン留めする
     * 指定したメッセージをピン留めします。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;MessagePin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created 指定したメッセージがピン留めされました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Forbidden これ以上このメッセージのチャンネルにピン留めすることはできません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<MessagePin> createPinWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = createPinValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<MessagePin>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ピン留めする (asynchronously)
     * 指定したメッセージをピン留めします。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created 指定したメッセージがピン留めされました。 </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Forbidden これ以上このメッセージのチャンネルにピン留めすることはできません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPinAsync(UUID messageId, final ApiCallback<MessagePin> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPinValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<MessagePin>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteMessage
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 正常に削除できました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteMessageCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMessage(Async)");
        }


        okhttp3.Call localVarCall = deleteMessageCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * メッセージを削除
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     *
     * @param messageId メッセージUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 正常に削除できました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteMessage(UUID messageId) throws ApiException {
        deleteMessageWithHttpInfo(messageId);
    }

    /**
     * メッセージを削除
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 正常に削除できました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteMessageWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageValidateBeforeCall(messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * メッセージを削除 (asynchronously)
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 正常に削除できました。 </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを削除する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteMessageAsync(UUID messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageValidateBeforeCall(messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for editMessage
     *
     * @param messageId          メッセージUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editMessageCall(UUID messageId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postMessageRequest;

        // create path and map variables
        String localVarPath = "/messages/{messageId}"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMessageValidateBeforeCall(UUID messageId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling editMessage(Async)");
        }


        okhttp3.Call localVarCall = editMessageCall(messageId, postMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * メッセージを編集
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     *
     * @param messageId          メッセージUUID (required)
     * @param postMessageRequest (optional)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public Message editMessage(UUID messageId, PostMessageRequest postMessageRequest) throws ApiException {
        ApiResponse<Message> localVarResp = editMessageWithHttpInfo(messageId, postMessageRequest);
        return localVarResp.getData();
    }

    /**
     * メッセージを編集
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     *
     * @param messageId          メッセージUUID (required)
     * @param postMessageRequest (optional)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Message> editMessageWithHttpInfo(UUID messageId, PostMessageRequest postMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = editMessageValidateBeforeCall(messageId, postMessageRequest, null);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * メッセージを編集 (asynchronously)
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     *
     * @param messageId          メッセージUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden 指定されたメッセージを編集する権限がありません。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call editMessageAsync(UUID messageId, PostMessageRequest postMessageRequest, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMessageValidateBeforeCall(messageId, postMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDirectMessages
     *
     * @param userId    ユーザーUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDirectMessagesCall(UUID userId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/messages"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (inclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inclusive", inclusive));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectMessagesValidateBeforeCall(UUID userId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getDirectMessages(Async)");
        }


        okhttp3.Call localVarCall = getDirectMessagesCall(userId, limit, offset, since, until, inclusive, order, _callback);
        return localVarCall;

    }

    /**
     * ダイレクトメッセージのリストを取得
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     *
     * @param userId    ユーザーUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return List&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<Message> getDirectMessages(UUID userId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        ApiResponse<List<Message>> localVarResp = getDirectMessagesWithHttpInfo(userId, limit, offset, since, until, inclusive, order);
        return localVarResp.getData();
    }

    /**
     * ダイレクトメッセージのリストを取得
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     *
     * @param userId    ユーザーUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return ApiResponse&lt;List&lt;Message&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Message>> getDirectMessagesWithHttpInfo(UUID userId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        okhttp3.Call localVarCall = getDirectMessagesValidateBeforeCall(userId, limit, offset, since, until, inclusive, order, null);
        Type localVarReturnType = new TypeToken<List<Message>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ダイレクトメッセージのリストを取得 (asynchronously)
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     *
     * @param userId    ユーザーUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDirectMessagesAsync(UUID userId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback<List<Message>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectMessagesValidateBeforeCall(userId, limit, offset, since, until, inclusive, order, _callback);
        Type localVarReturnType = new TypeToken<List<Message>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMessage
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessage(Async)");
        }


        okhttp3.Call localVarCall = getMessageCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * メッセージを取得
     * 指定したメッセージを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public Message getMessage(UUID messageId) throws ApiException {
        ApiResponse<Message> localVarResp = getMessageWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * メッセージを取得
     * 指定したメッセージを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Message> getMessageWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = getMessageValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * メッセージを取得 (asynchronously)
     * 指定したメッセージを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageAsync(UUID messageId, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMessageClips
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageClipsCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/clips"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageClipsValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageClips(Async)");
        }


        okhttp3.Call localVarCall = getMessageClipsCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * 自分のクリップを取得
     * 対象のメッセージの自分のクリップの一覧を返します。
     *
     * @param messageId メッセージUUID (required)
     * @return List&lt;MessageClip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public List<MessageClip> getMessageClips(UUID messageId) throws ApiException {
        ApiResponse<List<MessageClip>> localVarResp = getMessageClipsWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * 自分のクリップを取得
     * 対象のメッセージの自分のクリップの一覧を返します。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;List&lt;MessageClip&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<MessageClip>> getMessageClipsWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = getMessageClipsValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<List<MessageClip>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 自分のクリップを取得 (asynchronously)
     * 対象のメッセージの自分のクリップの一覧を返します。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageClipsAsync(UUID messageId, final ApiCallback<List<MessageClip>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageClipsValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<List<MessageClip>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMessageStamps
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageStampsCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/stamps"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageStampsValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageStamps(Async)");
        }


        okhttp3.Call localVarCall = getMessageStampsCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * メッセージのスタンプリストを取得
     * 指定したメッセージに押されているスタンプのリストを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return List&lt;MessageStamp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public List<MessageStamp> getMessageStamps(UUID messageId) throws ApiException {
        ApiResponse<List<MessageStamp>> localVarResp = getMessageStampsWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * メッセージのスタンプリストを取得
     * 指定したメッセージに押されているスタンプのリストを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;List&lt;MessageStamp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<MessageStamp>> getMessageStampsWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = getMessageStampsValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<List<MessageStamp>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * メッセージのスタンプリストを取得 (asynchronously)
     * 指定したメッセージに押されているスタンプのリストを取得します。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessageStampsAsync(UUID messageId, final ApiCallback<List<MessageStamp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageStampsValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<List<MessageStamp>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getMessages
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessagesCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/messages"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (inclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inclusive", inclusive));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesValidateBeforeCall(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getMessages(Async)");
        }


        okhttp3.Call localVarCall = getMessagesCall(channelId, limit, offset, since, until, inclusive, order, _callback);
        return localVarCall;

    }

    /**
     * チャンネルメッセージのリストを取得
     * 指定したチャンネルのメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return List&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public List<Message> getMessages(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        ApiResponse<List<Message>> localVarResp = getMessagesWithHttpInfo(channelId, limit, offset, since, until, inclusive, order);
        return localVarResp.getData();
    }

    /**
     * チャンネルメッセージのリストを取得
     * 指定したチャンネルのメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @return ApiResponse&lt;List&lt;Message&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Message>> getMessagesWithHttpInfo(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order) throws ApiException {
        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, null);
        Type localVarReturnType = new TypeToken<List<Message>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルメッセージのリストを取得 (asynchronously)
     * 指定したチャンネルのメッセージのリストを取得します。
     *
     * @param channelId チャンネルUUID (required)
     * @param limit     取得する件数 (optional, default to 0)
     * @param offset    取得するオフセット (optional, default to 0)
     * @param since     取得する時間範囲の開始日時 (optional, default to 0000-01-01T00:00Z)
     * @param until     取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order     昇順か降順か (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * X-TRAQ-MORE -  <br>  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMessagesAsync(UUID channelId, Integer limit, Integer offset, OffsetDateTime since, OffsetDateTime until, Boolean inclusive, String order, final ApiCallback<List<Message>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesValidateBeforeCall(channelId, limit, offset, since, until, inclusive, order, _callback);
        Type localVarReturnType = new TypeToken<List<Message>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getPin
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getPinCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/pin"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPinValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getPin(Async)");
        }


        okhttp3.Call localVarCall = getPinCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * ピン留めを取得
     * 指定したメッセージのピン留め情報を取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return MessagePin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public MessagePin getPin(UUID messageId) throws ApiException {
        ApiResponse<MessagePin> localVarResp = getPinWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * ピン留めを取得
     * 指定したメッセージのピン留め情報を取得します。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;MessagePin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<MessagePin> getPinWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = getPinValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<MessagePin>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ピン留めを取得 (asynchronously)
     * 指定したメッセージのピン留め情報を取得します。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getPinAsync(UUID messageId, final ApiCallback<MessagePin> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPinValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<MessagePin>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for postDirectMessage
     *
     * @param userId             ユーザーUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call postDirectMessageCall(UUID userId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postMessageRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/messages"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDirectMessageValidateBeforeCall(UUID userId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling postDirectMessage(Async)");
        }


        okhttp3.Call localVarCall = postDirectMessageCall(userId, postMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * ダイレクトメッセージを送信
     * 指定したユーザーにダイレクトメッセージを送信します。
     *
     * @param userId             ユーザーUUID (required)
     * @param postMessageRequest (optional)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public Message postDirectMessage(UUID userId, PostMessageRequest postMessageRequest) throws ApiException {
        ApiResponse<Message> localVarResp = postDirectMessageWithHttpInfo(userId, postMessageRequest);
        return localVarResp.getData();
    }

    /**
     * ダイレクトメッセージを送信
     * 指定したユーザーにダイレクトメッセージを送信します。
     *
     * @param userId             ユーザーUUID (required)
     * @param postMessageRequest (optional)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Message> postDirectMessageWithHttpInfo(UUID userId, PostMessageRequest postMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = postDirectMessageValidateBeforeCall(userId, postMessageRequest, null);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ダイレクトメッセージを送信 (asynchronously)
     * 指定したユーザーにダイレクトメッセージを送信します。
     *
     * @param userId             ユーザーUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found ユーザーが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call postDirectMessageAsync(UUID userId, PostMessageRequest postMessageRequest, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDirectMessageValidateBeforeCall(userId, postMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for postMessage
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call postMessageCall(UUID channelId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = postMessageRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelId}/messages"
                .replaceAll("\\{" + "channelId" + "\\}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMessageValidateBeforeCall(UUID channelId, PostMessageRequest postMessageRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling postMessage(Async)");
        }


        okhttp3.Call localVarCall = postMessageCall(channelId, postMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * チャンネルにメッセージを投稿
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public Message postMessage(UUID channelId, PostMessageRequest postMessageRequest) throws ApiException {
        ApiResponse<Message> localVarResp = postMessageWithHttpInfo(channelId, postMessageRequest);
        return localVarResp.getData();
    }

    /**
     * チャンネルにメッセージを投稿
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Message> postMessageWithHttpInfo(UUID channelId, PostMessageRequest postMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = postMessageValidateBeforeCall(channelId, postMessageRequest, null);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * チャンネルにメッセージを投稿 (asynchronously)
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     *
     * @param channelId          チャンネルUUID (required)
     * @param postMessageRequest (optional)
     * @param _callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found チャンネルが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call postMessageAsync(UUID channelId, PostMessageRequest postMessageRequest, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMessageValidateBeforeCall(channelId, postMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<Message>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeMessageStamp
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeMessageStampCall(UUID messageId, UUID stampId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/stamps/{stampId}"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()))
                .replaceAll("\\{" + "stampId" + "\\}", localVarApiClient.escapeString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMessageStampValidateBeforeCall(UUID messageId, UUID stampId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling removeMessageStamp(Async)");
        }

        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling removeMessageStamp(Async)");
        }


        okhttp3.Call localVarCall = removeMessageStampCall(messageId, stampId, _callback);
        return localVarCall;

    }

    /**
     * スタンプを消す
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void removeMessageStamp(UUID messageId, UUID stampId) throws ApiException {
        removeMessageStampWithHttpInfo(messageId, stampId);
    }

    /**
     * スタンプを消す
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> removeMessageStampWithHttpInfo(UUID messageId, UUID stampId) throws ApiException {
        okhttp3.Call localVarCall = removeMessageStampValidateBeforeCall(messageId, stampId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * スタンプを消す (asynchronously)
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     *
     * @param messageId メッセージUUID (required)
     * @param stampId   スタンプUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content スタンプを消すことができました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found メッセージ、またはスタンプが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeMessageStampAsync(UUID messageId, UUID stampId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMessageStampValidateBeforeCall(messageId, stampId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for removePin
     *
     * @param messageId メッセージUUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したメッセージのピン留めが外されました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removePinCall(UUID messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{messageId}/pin"
                .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePinValidateBeforeCall(UUID messageId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling removePin(Async)");
        }


        okhttp3.Call localVarCall = removePinCall(messageId, _callback);
        return localVarCall;

    }

    /**
     * ピン留めを外す
     * 指定したメッセージのピン留めを外します。
     *
     * @param messageId メッセージUUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したメッセージのピン留めが外されました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public void removePin(UUID messageId) throws ApiException {
        removePinWithHttpInfo(messageId);
    }

    /**
     * ピン留めを外す
     * 指定したメッセージのピン留めを外します。
     *
     * @param messageId メッセージUUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したメッセージのピン留めが外されました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> removePinWithHttpInfo(UUID messageId) throws ApiException {
        okhttp3.Call localVarCall = removePinValidateBeforeCall(messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * ピン留めを外す (asynchronously)
     * 指定したメッセージのピン留めを外します。
     *
     * @param messageId メッセージUUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> No Content 指定したメッセージのピン留めが外されました。 </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found 指定したメッセージ、またはピン留めが見つかりません。 </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removePinAsync(UUID messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePinValidateBeforeCall(messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for searchMessages
     *
     * @param word           検索ワード Simple-Query-String-Syntaxをパースして検索します  (optional)
     * @param after          投稿日時が指定日時より後 (optional)
     * @param before         投稿日時が指定日時より前 (optional)
     * @param in             メッセージが投稿されたチャンネル (optional)
     * @param to             メンションされたユーザー (optional)
     * @param from           メッセージを投稿したユーザー (optional)
     * @param citation       引用しているメッセージ (optional)
     * @param bot            メッセージを投稿したユーザーがBotかどうか (optional)
     * @param hasURL         メッセージがURLを含むか (optional)
     * @param hasAttachments メッセージが添付ファイルを含むか (optional)
     * @param hasImage       メッセージが画像を含むか (optional)
     * @param hasVideo       メッセージが動画を含むか (optional)
     * @param hasAudio       メッセージが音声ファイルを含むか (optional)
     * @param limit          検索結果から取得するメッセージの最大件数 (optional)
     * @param offset         検索結果から取得するメッセージのオフセット (optional)
     * @param sort           ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;) (optional, default to -createdAt)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 503 </td><td> search service is currently unavailable </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call searchMessagesCall(String word, OffsetDateTime after, OffsetDateTime before, UUID in, UUID to, UUID from, UUID citation, Boolean bot, Boolean hasURL, Boolean hasAttachments, Boolean hasImage, Boolean hasVideo, Boolean hasAudio, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (word != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word", word));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (in != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in", in));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (citation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("citation", citation));
        }

        if (bot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bot", bot));
        }

        if (hasURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasURL", hasURL));
        }

        if (hasAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasAttachments", hasAttachments));
        }

        if (hasImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasImage", hasImage));
        }

        if (hasVideo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasVideo", hasVideo));
        }

        if (hasAudio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasAudio", hasAudio));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"OAuth2"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchMessagesValidateBeforeCall(String word, OffsetDateTime after, OffsetDateTime before, UUID in, UUID to, UUID from, UUID citation, Boolean bot, Boolean hasURL, Boolean hasAttachments, Boolean hasImage, Boolean hasVideo, Boolean hasAudio, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = searchMessagesCall(word, after, before, in, to, from, citation, bot, hasURL, hasAttachments, hasImage, hasVideo, hasAudio, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * メッセージを検索
     * メッセージを検索します。
     *
     * @param word           検索ワード Simple-Query-String-Syntaxをパースして検索します  (optional)
     * @param after          投稿日時が指定日時より後 (optional)
     * @param before         投稿日時が指定日時より前 (optional)
     * @param in             メッセージが投稿されたチャンネル (optional)
     * @param to             メンションされたユーザー (optional)
     * @param from           メッセージを投稿したユーザー (optional)
     * @param citation       引用しているメッセージ (optional)
     * @param bot            メッセージを投稿したユーザーがBotかどうか (optional)
     * @param hasURL         メッセージがURLを含むか (optional)
     * @param hasAttachments メッセージが添付ファイルを含むか (optional)
     * @param hasImage       メッセージが画像を含むか (optional)
     * @param hasVideo       メッセージが動画を含むか (optional)
     * @param hasAudio       メッセージが音声ファイルを含むか (optional)
     * @param limit          検索結果から取得するメッセージの最大件数 (optional)
     * @param offset         検索結果から取得するメッセージのオフセット (optional)
     * @param sort           ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;) (optional, default to -createdAt)
     * @return MessageSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 503 </td><td> search service is currently unavailable </td><td>  -  </td></tr>
     * </table>
     */
    public MessageSearchResult searchMessages(String word, OffsetDateTime after, OffsetDateTime before, UUID in, UUID to, UUID from, UUID citation, Boolean bot, Boolean hasURL, Boolean hasAttachments, Boolean hasImage, Boolean hasVideo, Boolean hasAudio, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<MessageSearchResult> localVarResp = searchMessagesWithHttpInfo(word, after, before, in, to, from, citation, bot, hasURL, hasAttachments, hasImage, hasVideo, hasAudio, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * メッセージを検索
     * メッセージを検索します。
     *
     * @param word           検索ワード Simple-Query-String-Syntaxをパースして検索します  (optional)
     * @param after          投稿日時が指定日時より後 (optional)
     * @param before         投稿日時が指定日時より前 (optional)
     * @param in             メッセージが投稿されたチャンネル (optional)
     * @param to             メンションされたユーザー (optional)
     * @param from           メッセージを投稿したユーザー (optional)
     * @param citation       引用しているメッセージ (optional)
     * @param bot            メッセージを投稿したユーザーがBotかどうか (optional)
     * @param hasURL         メッセージがURLを含むか (optional)
     * @param hasAttachments メッセージが添付ファイルを含むか (optional)
     * @param hasImage       メッセージが画像を含むか (optional)
     * @param hasVideo       メッセージが動画を含むか (optional)
     * @param hasAudio       メッセージが音声ファイルを含むか (optional)
     * @param limit          検索結果から取得するメッセージの最大件数 (optional)
     * @param offset         検索結果から取得するメッセージのオフセット (optional)
     * @param sort           ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;) (optional, default to -createdAt)
     * @return ApiResponse&lt;MessageSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 503 </td><td> search service is currently unavailable </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<MessageSearchResult> searchMessagesWithHttpInfo(String word, OffsetDateTime after, OffsetDateTime before, UUID in, UUID to, UUID from, UUID citation, Boolean bot, Boolean hasURL, Boolean hasAttachments, Boolean hasImage, Boolean hasVideo, Boolean hasAudio, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = searchMessagesValidateBeforeCall(word, after, before, in, to, from, citation, bot, hasURL, hasAttachments, hasImage, hasVideo, hasAudio, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<MessageSearchResult>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * メッセージを検索 (asynchronously)
     * メッセージを検索します。
     *
     * @param word           検索ワード Simple-Query-String-Syntaxをパースして検索します  (optional)
     * @param after          投稿日時が指定日時より後 (optional)
     * @param before         投稿日時が指定日時より前 (optional)
     * @param in             メッセージが投稿されたチャンネル (optional)
     * @param to             メンションされたユーザー (optional)
     * @param from           メッセージを投稿したユーザー (optional)
     * @param citation       引用しているメッセージ (optional)
     * @param bot            メッセージを投稿したユーザーがBotかどうか (optional)
     * @param hasURL         メッセージがURLを含むか (optional)
     * @param hasAttachments メッセージが添付ファイルを含むか (optional)
     * @param hasImage       メッセージが画像を含むか (optional)
     * @param hasVideo       メッセージが動画を含むか (optional)
     * @param hasAudio       メッセージが音声ファイルを含むか (optional)
     * @param limit          検索結果から取得するメッセージの最大件数 (optional)
     * @param offset         検索結果から取得するメッセージのオフセット (optional)
     * @param sort           ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;) (optional, default to -createdAt)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 503 </td><td> search service is currently unavailable </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call searchMessagesAsync(String word, OffsetDateTime after, OffsetDateTime before, UUID in, UUID to, UUID from, UUID citation, Boolean bot, Boolean hasURL, Boolean hasAttachments, Boolean hasImage, Boolean hasVideo, Boolean hasAudio, Integer limit, Integer offset, String sort, final ApiCallback<MessageSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchMessagesValidateBeforeCall(word, after, before, in, to, from, citation, bot, hasURL, hasAttachments, hasImage, hasVideo, hasAudio, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<MessageSearchResult>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
