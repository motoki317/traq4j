/*
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.motoki317.traq4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.github.motoki317.traq4j.JSON;

/**
 * チャンネル購読者編集リクエスト
 */
@ApiModel(description = "チャンネル購読者編集リクエスト")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T02:01:01.991892Z[Etc/UTC]")
public class PatchChannelSubscribersRequest {
  public static final String SERIALIZED_NAME_ON = "on";
  @SerializedName(SERIALIZED_NAME_ON)
  private List<UUID> on = null;

  public static final String SERIALIZED_NAME_OFF = "off";
  @SerializedName(SERIALIZED_NAME_OFF)
  private List<UUID> off = null;

  public PatchChannelSubscribersRequest() { 
  }

  public PatchChannelSubscribersRequest on(List<UUID> on) {
    
    this.on = on;
    return this;
  }

  public PatchChannelSubscribersRequest addOnItem(UUID onItem) {
    if (this.on == null) {
      this.on = new ArrayList<>();
    }
    this.on.add(onItem);
    return this;
  }

   /**
   * 通知をオンにするユーザーのUUID配列
   * @return on
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "通知をオンにするユーザーのUUID配列")

  public List<UUID> getOn() {
    return on;
  }


  public void setOn(List<UUID> on) {
    this.on = on;
  }


  public PatchChannelSubscribersRequest off(List<UUID> off) {
    
    this.off = off;
    return this;
  }

  public PatchChannelSubscribersRequest addOffItem(UUID offItem) {
    if (this.off == null) {
      this.off = new ArrayList<>();
    }
    this.off.add(offItem);
    return this;
  }

   /**
   * 通知をオフにするユーザーのUUID配列
   * @return off
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "通知をオフにするユーザーのUUID配列")

  public List<UUID> getOff() {
    return off;
  }


  public void setOff(List<UUID> off) {
    this.off = off;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchChannelSubscribersRequest patchChannelSubscribersRequest = (PatchChannelSubscribersRequest) o;
    return Objects.equals(this.on, patchChannelSubscribersRequest.on) &&
        Objects.equals(this.off, patchChannelSubscribersRequest.off);
  }

  @Override
  public int hashCode() {
    return Objects.hash(on, off);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchChannelSubscribersRequest {\n");
    sb.append("    on: ").append(toIndentedString(on)).append("\n");
    sb.append("    off: ").append(toIndentedString(off)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("on");
    openapiFields.add("off");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatchChannelSubscribersRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PatchChannelSubscribersRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchChannelSubscribersRequest is not found in the empty JSON string", PatchChannelSubscribersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatchChannelSubscribersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchChannelSubscribersRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("on") != null && !jsonObj.get("on").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `on` to be an array in the JSON string but got `%s`", jsonObj.get("on").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("off") != null && !jsonObj.get("off").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `off` to be an array in the JSON string but got `%s`", jsonObj.get("off").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchChannelSubscribersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchChannelSubscribersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchChannelSubscribersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchChannelSubscribersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchChannelSubscribersRequest>() {
           @Override
           public void write(JsonWriter out, PatchChannelSubscribersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchChannelSubscribersRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatchChannelSubscribersRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatchChannelSubscribersRequest
  * @throws IOException if the JSON string is invalid with respect to PatchChannelSubscribersRequest
  */
  public static PatchChannelSubscribersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchChannelSubscribersRequest.class);
  }

 /**
  * Convert an instance of PatchChannelSubscribersRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

